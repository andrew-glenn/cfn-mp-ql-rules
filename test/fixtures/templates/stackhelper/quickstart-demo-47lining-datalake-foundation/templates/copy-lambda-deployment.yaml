AWSTemplateFormatVersion: "2010-09-09"
Description: AWS CloudFormation templates to copy required lambda deployment package for the demo.
Parameters:
  QSS3BucketName:
    Description: Quick Start S3 bucket name
    Type: String
  QSS3KeyPrefix:
    Description: Quick Start S3 key prefix
    Type: String
  RegionalLambdaBucketName:
    Description: RegionalLambdaBucket bucket name
    Type: String
  CopyLambdaDeploymentRoleARN:
    Type: String
Resources:
  CopyLambdaDeployment:
    Properties:
      QSS3BucketName: !Ref 'QSS3BucketName'
      QSS3KeyPrefix: !Ref 'QSS3KeyPrefix'
      RegionalLambdaBucket: !Ref 'RegionalLambdaBucketName'
      ServiceToken: !GetAtt 'CopyLambdaDeploymentFunction.Arn'
    Type: Custom::CopyLambdaDeployment
  CopyLambdaDeploymentFunction:
    Properties:
      Code:
        ZipFile: !Join
        - "\n"
        - - import json
          - import cfnresponse
          - import boto3
          - from botocore.exceptions import ClientError
          - ''
          - s3 = boto3.client('s3')
          - ''
          - ''
          - 'def handler(event, context):'
          - '    target_bucket = event[''ResourceProperties''][''RegionalLambdaBucket'']'
          - '    target_key = ''lambdas_demo.zip'''
          - '    source_bucket = event[''ResourceProperties''][''QSS3BucketName'']'
          - '    source_key = ''{0}assets/lambdas/lambdas_demo.zip''.format(event[''ResourceProperties''][''QSS3KeyPrefix''])'
          - ''
          - '    if event[''RequestType''] == ''Delete'':'
          - '        try:'
          - '            s3.delete_object(Bucket=target_bucket, Key=target_key)'
          - '            return cfnresponse.send(event, context, cfnresponse.SUCCESS,
              {})'
          - '        except ClientError as e:'
          - '            print(e)'
          - '            return cfnresponse.send(event, context, cfnresponse.FAILED,
              {})'
          - '    try:'
          - '        copy_source = {''Bucket'': source_bucket, ''Key'': source_key}'
          - '        s3.copy_object(Bucket=target_bucket, Key=target_key, CopySource=copy_source)'
          - '        return cfnresponse.send(event, context, cfnresponse.SUCCESS,
              {})'
          - '    except ClientError as e:'
          - '        print(e)'
          - '        return cfnresponse.send(event, context, cfnresponse.FAILED,
              {})'
      Description: Copy deployment package to the regional bucket
      Handler: index.handler
      Role: !Ref 'CopyLambdaDeploymentRoleARN'
      Runtime: python3.6
      Timeout: 30
    Type: AWS::Lambda::Function
