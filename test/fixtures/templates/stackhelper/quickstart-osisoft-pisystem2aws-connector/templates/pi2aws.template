{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Deploy OSIsoft PI System to AWS Connector Quick Start into existing VPC. **WARNING** You will be billed for the AWS resources used if you create a stack from this template. (qs-1o800q0dn)",
    "Mappings": {
        "Constants": {
            "Buckets": {
                "CuratedDatasetsNamePrefix": "datalake-curated-datasets-pi2aws",
                "PublishedDataNamePrefix": "datalake-published-data-pi2aws",
                "AthenaResultBucketNamePrefix": "athena-pi2aws-query-results",
                "LicencedBinaryDestinationKeyPrefix": "licenced/"
            },
            "TableNames": {
                "EventsStatusTableNamePrefix": "EventsStatus",
                "PiPointsTableNamePrefix": "PiPoints"
            }
        }
    },
    "Metadata": {
        "AWS::CloudFormation::Interface": {
            "ParameterGroups": [
                {
                    "Label": {
                        "default": "Network Configuration"
                    },
                    "Parameters": [
                        "AvailabilityZones",
                        "VPCID",
                        "VPCCIDR",
                        "PrivateSubnet1ID",
                        "PrivateSubnet2ID",
                        "PublicSubnet1ID",
                        "PublicSubnet2ID",
                        "RemoteAccessCIDR",
                        "KeyName"
                    ]
                },
                {
                    "Label": {
                        "default": "Licensed 3rd-party Software Installers Configuration"
                    },
                    "Parameters": [
                        "LicensedSoftwareS3BucketName",
                        "LicensedSoftwareS3KeyPrefix",
                        "ConnectorAgentAssetsS3BucketName",
                        "ConnectorAgentAssetsS3KeyPrefix"
                    ]
                },
                {
                    "Label": {
                        "default": "OSIsoft Authentication Configuration"
                    },
                    "Parameters": [
                        "AuthType"
                    ]
                },
                {
                    "Label": {
                        "default": "Authentication Configuration for WIS"
                    },
                    "Parameters": [
                        "WISFQDN",
                        "WISUser",
                        "WISPassword",
                        "DomainControllerServerIP"
                    ]
                },
                {
                    "Label": {
                        "default": "Authentication Configuration for Explicit User and Password"
                    },
                    "Parameters": [
                        "PIUser",
                        "PIPassword",
                        "AFDomainName",
                        "AFUser",
                        "AFPassword"
                    ]
                },
                {
                    "Label": {
                        "default": "PI Data Archive Server Configuration"
                    },
                    "Parameters": [
                        "PIServerIP",
                        "PIPort"
                    ]
                },
                {
                    "Label": {
                        "default": "Asset Framework Server Configuration"
                    },
                    "Parameters": [
                        "AFServerIP",
                        "AFPort",
                        "AfStructureDatabase"
                    ]
                },
                {
                    "Label": {
                        "default": "Connector Agent Configuration"
                    },
                    "Parameters": [
                        "ConnectorInstanceType",
                        "LogGroupNamePrefix",
                        "MetricNamespaceNamePrefix"
                    ]
                },
                {
                    "Label": {
                        "default": "Management Console Configuration"
                    },
                    "Parameters": [
                        "InstanceType",
                        "ApplicationUser",
                        "ApplicationPassword"
                    ]
                },
                {
                    "Label": {
                        "default": "Connector Supporting Infrastructure Configuration"
                    },
                    "Parameters": [
                        "WorkerInstanceType",
                        "ReadCapacity",
                        "WriteCapacity",
                        "KinesisStreamsShardsCount"
                    ]
                },
                {
                    "Label": {
                        "default": "Elasticsearch Configuration"
                    },
                    "Parameters": [
                        "MaxIndexAge",
                        "ElasticsearchNodeCount",
                        "ElasticsearchNodeType"
                    ]
                },
                {
                    "Label": {
                        "default": "S3 Lifecycle Management"
                    },
                    "Parameters": [
                        "EnableS3LifecycleRules",
                        "IATransitionPeriodInDays",
                        "GlacierTransitionPeriodInDays"
                    ]
                },
                {
                    "Label": {
                        "default": "AWS Quick Start Configuration"
                    },
                    "Parameters": [
                        "QSS3BucketName",
                        "QSS3KeyPrefix",
                        "QSDeploymentSuffix"
                    ]
                }
            ],
            "ParameterLabels": {
                "AFDomainName": {
                    "default": "Asset Framework Domain Name"
                },
                "AFPassword": {
                    "default": "Asset Framework Password"
                },
                "AFPort": {
                    "default": "Asset Framework Port"
                },
                "AFServerIP": {
                    "default": "Asset Framework Server IP"
                },
                "AFUser": {
                    "default": "Asset Framework User"
                },
                "AfStructureDatabase": {
                    "default": "Asset Framework Structure Database"
                },
                "ApplicationPassword": {
                    "default": "Management Console Password"
                },
                "ApplicationUser": {
                    "default": "Management Console User Name"
                },
                "AuthType": {
                    "default": "Authentication Method"
                },
                "AvailabilityZones": {
                    "default": "Availability Zones"
                },
                "ConnectorAgentAssetsS3BucketName": {
                    "default": "Connector Agent Assets S3 Bucket Name"
                },
                "ConnectorAgentAssetsS3KeyPrefix": {
                    "default": "Connector Agent Assets S3 Key Prefix"
                },
                "ConnectorInstanceType": {
                    "default": "Connector Agent Instance Type"
                },
                "DomainControllerServerIP": {
                    "default": "Domain Controller Server IP"
                },
                "ElasticsearchNodeCount": {
                    "default": "Elasticsearch Node Count"
                },
                "ElasticsearchNodeType": {
                    "default": "Elasticsearch Node Type"
                },
                "EnableS3LifecycleRules": {
                    "default": "Enable S3 Lifecycle"
                },
                "GlacierTransitionPeriodInDays": {
                    "default": "Glacier Transition Period"
                },
                "IATransitionPeriodInDays": {
                    "default": "IA Transition Period"
                },
                "InstanceType": {
                    "default": "Management Console Instance Type"
                },
                "KeyName": {
                    "default": "Key Name"
                },
                "KinesisStreamsShardsCount": {
                    "default": "Kinesis Streams Shards Count"
                },
                "LicensedSoftwareS3BucketName": {
                    "default": "Licensed Software S3 Bucket Name"
                },
                "LicensedSoftwareS3KeyPrefix": {
                    "default": "Licensed Software S3 Key Prefix"
                },
                "LogGroupNamePrefix": {
                    "default": "Log Group Name Prefix"
                },
                "MaxIndexAge": {
                    "default": "Days to Live"
                },
                "MetricNamespaceNamePrefix": {
                    "default": "Metric Namespace Name Prefix"
                },
                "PIPassword": {
                    "default": "PI Password"
                },
                "PIPort": {
                    "default": "PI Port"
                },
                "PIServerIP": {
                    "default": "PI Server IP"
                },
                "PIUser": {
                    "default": "PI User"
                },
                "PrivateSubnet1ID": {
                    "default": "Existing VPC Private Subnet 1 ID"
                },
                "PrivateSubnet2ID": {
                    "default": "Existing VPC Private Subnet 2 ID"
                },
                "PublicSubnet1ID": {
                    "default": "Existing VPC Public Subnet 1 ID"
                },
                "PublicSubnet2ID": {
                    "default": "Existing VPC Public Subnet 2 ID"
                },
                "QSDeploymentSuffix": {
                    "default": "Quick Start Deployment Suffix"
                },
                "QSS3BucketName": {
                    "default": "Quick Start S3 Bucket Name"
                },
                "QSS3KeyPrefix": {
                    "default": "Quick Start S3 Key Prefix"
                },
                "ReadCapacity": {
                    "default": "DynamoDB Read Capacity"
                },
                "RemoteAccessCIDR": {
                    "default": "Remote Access CIDR"
                },
                "VPCCIDR": {
                    "default": "Existing VPC CIDR"
                },
                "VPCID": {
                    "default": "Existing VPC ID"
                },
                "WISFQDN": {
                    "default": "WIS Domain Name"
                },
                "WISPassword": {
                    "default": "WIS Domain User Password"
                },
                "WISUser": {
                    "default": "WIS Domain User Name"
                },
                "WorkerInstanceType": {
                    "default": "Communication Worker Instance Type"
                },
                "WriteCapacity": {
                    "default": "DynamoDB Write Capacity"
                }
            }
        }
    },
    "Parameters": {
        "AFDomainName": {
            "Description": "Domain name of the user who runs AF Server. This parameter is required only if you set Authentication Method to Explicit user and password and you adopted AF Server in your OSIsoft system. This Quick Start can independently connect to PI Data Archive and AF Server.",
            "Type": "String"
        },
        "AFPassword": {
            "Description": "Password of the user who has privileges to access AF Server. This parameter is required only if Authentication Method is set to Explicit user and password and you adopted AF Server in your OSIsoft system. This Quick Start can independently connect to PI Data Archive and AF Server.",
            "NoEcho": "true",
            "Type": "String"
        },
        "AFPort": {
            "Default": 5457,
            "Description": "Port on which PI AF server runs. This parameter is required only if you adopted AF Server in your OSIsoft system. This Quick Start can independently connect to PI Data Archive and AF Server.",
            "Type": "Number"
        },
        "AFServerIP": {
            "AllowedPattern": "^((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))?$",
            "Description": "Host (IP) of the PI AF server. This parameter is required only if you adopted AF Server in your OSIsoft system. This Quick Start can independently connect to PI Data Archive and AF Server.",
            "Type": "String"
        },
        "AFUser": {
            "Description": "Name of the user who has privileges to access PI Asset Framework Server. This parameter is required only if you set Authentication Method to Explicit user and password and you adopted AF Server in your OSIsoft system. This Quick Start can independently connect to PI Data Archive and AF Server.",
            "Type": "String"
        },
        "AfStructureDatabase": {
            "Description": "Name of the AF database that Connector Agent will connect to; for example, NuGreen. This parameter is required only if you adopted AF Server in your OSIsoft system. This Quick Start can independently connect to PI Data Archive and AF Server.",
            "Type": "String"
        },
        "ApplicationPassword": {
            "AllowedPattern": "^(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])[A-Za-z0-9!#$%&()*+,.:;<=>?\\[\\]^_`{|}~-]*$",
            "Description": "User password for the Management Console. The password must contain 8 to 64 printable ASCII characters, excluding: /, \", ', \\ and @, and must contain 1 uppercase letter, 1 lowercase letter, and 1 number.",
            "MaxLength": 64,
            "MinLength": 8,
            "NoEcho": "true",
            "Type": "String"
        },
        "ApplicationUser": {
            "AllowedPattern": "^[\\x00-\\x7F]*$",
            "ConstraintDescription": "User name must contain 1 to 64 ASCII characters.",
            "Default": "ConsoleAdmin",
            "Description": "The user name for the Management Console, consisting of 1-64 ASCII characters.",
            "MaxLength": "64",
            "MinLength": "1",
            "Type": "String"
        },
        "AuthType": {
            "AllowedValues": [
                "WIS",
                "Explicit user and password"
            ],
            "Default": "WIS",
            "Description": "The authentication method to use between the Connector and the OSIsoft PI System. Two authentication methods are supported: Windows Integrated Security (WIS) and explicit user and password authentication. If you are using Active Directory with your OSIsoft PI System and already have VPN established, you can use the WIS authentication method. If you don't use WIS, you can specify Explicit user and password. Depending on your choice, enter values for the parameters in one of the next two categories.",
            "Type": "String"
        },
        "AvailabilityZones": {
            "Description": "The list of Availability Zones to use for the subnets in the VPC. You must specify two Availability Zones. By default, the Quick Start preserves the logical order you specify.",
            "Type": "List<AWS::EC2::AvailabilityZone::Name>"
        },
        "ConnectorAgentAssetsS3BucketName": {
            "AllowedPattern": "^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$",
            "ConstraintDescription": "S3 bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-).",
            "Default": "aws-quickstart-datasets",
            "Description": "S3 bucket where Connector Agent sources are installed. The bucket name can include numbers, lowercase letters, uppercase letters, and hyphens, but should not start or end with a hyphen.",
            "Type": "String"
        },
        "ConnectorAgentAssetsS3KeyPrefix": {
            "AllowedPattern": "^[0-9a-zA-Z-][0-9a-zA-Z-/]*/$",
            "ConstraintDescription": "The S3 key name prefix to where Connector Agent sources are installed. This prefix can include numbers, lowercase letters, uppercase letters, hyphens, and forward slashes.",
            "Default": "osisoft/agent/v1/",
            "Description": "The S3 key name prefix to where Connector Agent sources are installed. This prefix can include numbers, lowercase letters, uppercase letters, hyphens, and forward slashes.",
            "Type": "String"
        },
        "ConnectorInstanceType": {
            "AllowedValues": [
                "t2.nano",
                "t2.micro",
                "t2.small",
                "t2.medium",
                "t2.large",
                "m4.large",
                "m4.xlarge",
                "m4.2xlarge",
                "m4.4xlarge",
                "m4.10xlarge",
                "m5.large",
                "m5.xlarge",
                "m5.2xlarge",
                "m5.4xlarge",
                "m5.12xlarge",
                "c5.large",
                "c5.xlarge",
                "c5.2xlarge",
                "c5.4xlarge"
            ],
            "ConstraintDescription": "must be a valid EC2 instance type.",
            "Default": "m4.xlarge",
            "Description": "EC2 instance type for the Connector Agent instance.",
            "Type": "String"
        },
        "DomainControllerServerIP": {
            "AllowedPattern": "^((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))?$",
            "Description": "Host (IP) of the AD Domain Controller server. Required only if Authentication Method is set to \"WIS\".",
            "Type": "String"
        },
        "ElasticsearchNodeCount": {
            "Default": "1",
            "Description": "The number of nodes in the Elasticsearch cluster.",
            "Type": "Number"
        },
        "ElasticsearchNodeType": {
            "AllowedValues": [
                "t2.small.elasticsearch",
                "m4.large.elasticsearch",
                "m4.xlarge.elasticsearch",
                "c4.large.elasticsearch",
                "c4.xlarge.elasticsearch",
                "r4.large.elasticsearch",
                "r4.xlarge.elasticsearch"
            ],
            "ConstraintDescription": "must be a valid Elasticsearch node type.",
            "Default": "t2.small.elasticsearch",
            "Description": "The node type to be provisioned for the Elasticsearch cluster.",
            "Type": "String"
        },
        "EnableS3LifecycleRules": {
            "AllowedValues": [
                "yes",
                "no"
            ],
            "Default": "yes",
            "Description": "Set to no if you want to disable Amazon S3 lifecycle rules. For more information, see the Amazon S3 documentation.",
            "Type": "String"
        },
        "GlacierTransitionPeriodInDays": {
            "Default": 365,
            "Description": "Number of days after which data is transitioned to Amazon Glacier.",
            "Type": "Number"
        },
        "IATransitionPeriodInDays": {
            "Default": 90,
            "Description": "Number of days after which data is transitioned to infrequent access (IA) in Amazon S3. For more information, see the Amazon S3 documentation.",
            "Type": "Number"
        },
        "InstanceType": {
            "AllowedValues": [
                "t2.nano",
                "t2.micro",
                "t2.small",
                "t2.medium",
                "t2.large",
                "m4.large",
                "m4.xlarge",
                "m4.2xlarge",
                "m5.large",
                "m5.xlarge",
                "m5.2xlarge"
            ],
            "ConstraintDescription": "must be a valid EC2 instance type.",
            "Default": "t2.micro",
            "Description": "EC2 instance type for the Management Console.",
            "Type": "String"
        },
        "KeyName": {
            "ConstraintDescription": "Can contain only ASCII characters.",
            "Description": "Public/private key pair, which allows you to connect securely to your instance after it launches. When you created an AWS account, this is the key pair you created in your preferred region.",
            "Type": "AWS::EC2::KeyPair::KeyName"
        },
        "KinesisStreamsShardsCount": {
            "Default": 2,
            "Description": "The number of Kinesis Data Streams shards to provision for the PI Data stream. For guidance, see the Amazon Kinesis Data Streams documentation.",
            "MinValue": 1,
            "Type": "Number"
        },
        "LicensedSoftwareS3BucketName": {
            "AllowedPattern": "^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$",
            "ConstraintDescription": "S3 bucket bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-).",
            "Description": "S3 bucket where the Microsoft and OSIsoft licensed software (.NET Framework, PI AF Client SDK) are installed. The bucket name can include numbers, lowercase letters, uppercase letters, and hyphens, but should not start or end with a hyphen.",
            "Type": "String"
        },
        "LicensedSoftwareS3KeyPrefix": {
            "AllowedPattern": "^[0-9a-zA-Z-][0-9a-zA-Z-/]*/$",
            "ConstraintDescription": "The S3 key name prefix for required licensed software. This prefix can include numbers, lowercase letters, uppercase letters, hyphens, and forward slashes.",
            "Description": "The S3 key name prefix for required licensed software. This prefix can include numbers, lowercase letters, uppercase letters, hyphens, and forward slashes.",
            "Type": "String"
        },
        "LogGroupNamePrefix": {
            "Default": "ConnectorLogGroup",
            "Description": "Name of the Amazon CloudWatch log group for metric filters.",
            "Type": "String"
        },
        "MaxIndexAge": {
            "Default": 7,
            "Description": "The number of days after which managed feeds are removed from Amazon ES. Data is permanently stored in Amazon S3.",
            "Type": "Number"
        },
        "MetricNamespaceNamePrefix": {
            "Default": "ConnectorMetricNamespace",
            "Description": "Namespace name for the metric filters.",
            "Type": "String"
        },
        "PIPassword": {
            "Description": "Password for the PI Data Archive user. Required only if Authentication Method is set to \"Explicit user and password\".",
            "NoEcho": "true",
            "Type": "String"
        },
        "PIPort": {
            "ConstraintDescription": "PI Server port must be a valid number.",
            "Default": 5450,
            "Description": "Port on which PI Data Archive runs.",
            "Type": "Number"
        },
        "PIServerIP": {
            "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
            "ConstraintDescription": "PI Server IP must be a valid IP address.",
            "Description": "Host (IP) of the PI Data Archive server.",
            "Type": "String"
        },
        "PIUser": {
            "Description": "Name of the PI Data Archive user. Required only if Authentication Method is set to \"Explicit user and password\".",
            "Type": "String"
        },
        "PrivateSubnet1ID": {
            "Description": "ID of the private subnet 1 in Availability Zone 1 (e.g., subnet-a0246dcd)",
            "Type": "AWS::EC2::Subnet::Id"
        },
        "PrivateSubnet2ID": {
            "Description": "ID of the private subnet 2 in Availability Zone 2 (e.g., subnet-a0246dcd)",
            "Type": "AWS::EC2::Subnet::Id"
        },
        "PublicSubnet1ID": {
            "Description": "ID of the public subnet 1 in Availability Zone 1 (e.g., subnet-a0246dcd)",
            "Type": "AWS::EC2::Subnet::Id"
        },
        "PublicSubnet2ID": {
            "Description": "ID of the public subnet 2 in Availability Zone 2 (e.g., subnet-a0246dcd)",
            "Type": "AWS::EC2::Subnet::Id"
        },
        "QSDeploymentSuffix": {
            "AllowedPattern": "[a-z0-9]+",
            "ConstraintDescription": "Deployment suffix can include numbers, lowercase letters and should have the maximum length of 7 characters.",
            "Default": "qs",
            "Description": "You can deploy this Quick Start multiple times in the same AWS Region if you provide a different suffix with each launch. This suffix is added to resource names to make them unique for each deployment. Use this parameter to support the deployment of production and test environments in the same AWS Region and in the same AWS account. The suffix is a 1-7 character string that contains numbers and lowercase letters.",
            "MaxLength": 7,
            "MinLength": 1,
            "Type": "String"
        },
        "QSS3BucketName": {
            "AllowedPattern": "^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$",
            "ConstraintDescription": "Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-).",
            "Default": "aws-quickstart",
            "Description": "S3 bucket where the Quick Start templates and scripts are installed. Use this parameter to specify the S3 bucket name you've created for your copy of Quick Start assets, if you decide to customize or extend the Quick Start for your own use. The bucket name can include numbers, lowercase letters, uppercase letters, and hyphens, but should not start or end with a hyphen.",
            "Type": "String"
        },
        "QSS3KeyPrefix": {
            "AllowedPattern": "^[0-9a-zA-Z-][0-9a-zA-Z-/]*/$",
            "ConstraintDescription": "Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/).",
            "Default": "quickstart-osisoft-pisystem2aws-connector/",
            "Description": "The S3 key name prefix used to simulate a folder for your copy of Quick Start assets, if you decide to customize or extend the Quick Start for your own use. This prefix can include numbers, lowercase letters, uppercase letters, hyphens, and forward slashes.",
            "Type": "String"
        },
        "ReadCapacity": {
            "ConstraintDescription": "Must be between 1 and 10000",
            "Default": 1,
            "Description": "Read capacity of each DynamoDB table (1-10000). For more information, see the Amazon DynamoDB documentation.",
            "MaxValue": 10000,
            "MinValue": 1,
            "Type": "Number"
        },
        "RemoteAccessCIDR": {
            "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$",
            "ConstraintDescription": "CIDR block parameter must be in the form x.x.x.x/x",
            "Description": "The CIDR IP range that is permitted to access the OSIsoft PI System to AWS Connector software. We recommend that you set this value to a trusted IP range. For example, you might want to grant only your corporate network access to the software. You can use http://checkip.amazonaws.com/ to check your IP address. This parameter must be in the form x.x.x.x/x (e.g., 96.127.8.12/32, YOUR_IP/32).",
            "Type": "String"
        },
        "VPCCIDR": {
            "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$",
            "ConstraintDescription": "CIDR block parameter must be in the form x.x.x.x/16-28",
            "Description": "CIDR block for the VPC.",
            "Type": "String"
        },
        "VPCID": {
            "Description": "ID of your existing VPC (e.g., vpc-0343606e).",
            "Type": "AWS::EC2::VPC::Id"
        },
        "WISFQDN": {
            "Default": "",
            "Description": "Fully qualified domain name (FQDN) of the forest domain for the OSIsoft system e.g. \"osisoft-example.com\". Required only if Authentication Method is set to \"WIS\".",
            "Type": "String"
        },
        "WISPassword": {
            "Default": "",
            "Description": "The password (in Active Directory in your Windows network) for the user who has privileges to access PI Data Archive and AF Server. Required only if Authentication Method is set to \"WIS\".",
            "NoEcho": "true",
            "Type": "String"
        },
        "WISUser": {
            "Default": "",
            "Description": "The user name (in Active Directory in your Windows network) for the user who has privileges to access PI Data Archive and AF Server. Required only if Authentication Method is set to \"WIS\".",
            "Type": "String"
        },
        "WorkerInstanceType": {
            "AllowedValues": [
                "t2.micro",
                "t2.small",
                "t2.medium",
                "t2.large",
                "m4.large",
                "m4.xlarge",
                "m4.2xlarge",
                "m5.large",
                "m5.xlarge",
                "m5.2xlarge",
                "c4.large",
                "c4.xlarge",
                "c4.2xlarge",
                "c4.4xlarge",
                "c4.8xlarge"
            ],
            "ConstraintDescription": "must be a valid EC2 instance type.",
            "Default": "t2.micro",
            "Description": "EC2 instance type for the Communication Worker host. The Communication Worker processes messages coming from Connector Agent.",
            "Type": "String"
        },
        "WriteCapacity": {
            "ConstraintDescription": "Must be between 1 and 10000",
            "Default": 1,
            "Description": "Write capacity of each DynamoDB table (1-10000). For more information, see the Amazon DynamoDB documentation.",
            "MaxValue": 10000,
            "MinValue": 1,
            "Type": "Number"
        }
    },
    "Resources": {
        "AthenaPartitionsStack": {
            "DependsOn": [
                "CopyLambdaDeploymentStack"
            ],
            "Properties": {
                "Parameters": {
                    "AthenaTableLambdaRoleARN": {
                        "Fn::GetAtt": [
                            "IAMStack",
                            "Outputs.AthenaTableLambdaRoleARN"
                        ]
                    },
                    "AthenaTablePartitionLambdaRoleARN": {
                        "Fn::GetAtt": [
                            "IAMStack",
                            "Outputs.AthenaTablePartitionLambdaRoleARN"
                        ]
                    },
                    "CuratedDatasetsBucketName": {
                        "Fn::Sub": [
                            "${CuratedDatasetNamePrefix}-${AWS::AccountId}-${AWS::Region}-${QSDeploymentSuffix}",
                            {
                                "CuratedDatasetNamePrefix": {
                                    "Fn::FindInMap": [
                                        "Constants",
                                        "Buckets",
                                        "CuratedDatasetsNamePrefix"
                                    ]
                                }
                            }
                        ]
                    },
                    "EnableS3LifecycleRules": {
                        "Ref": "EnableS3LifecycleRules"
                    },
                    "GlacierTransitionPeriodInDays": {
                        "Ref": "GlacierTransitionPeriodInDays"
                    },
                    "IATransitionPeriodInDays": {
                        "Ref": "IATransitionPeriodInDays"
                    },
                    "QSDeploymentSuffix": {
                        "Ref": "QSDeploymentSuffix"
                    },
                    "RegionalLambdaBucketName": {
                        "Fn::GetAtt": [
                            "BucketsStack",
                            "Outputs.RegionalLambdaBucketName"
                        ]
                    }
                },
                "TemplateURL": {
                    "Fn::Sub": "https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}templates/athena-table-partitions.template"
                }
            },
            "Type": "AWS::CloudFormation::Stack"
        },
        "BucketsStack": {
            "Properties": {
                "Parameters": {
                    "QSDeploymentSuffix": {
                        "Ref": "QSDeploymentSuffix"
                    }
                },
                "TemplateURL": {
                    "Fn::Sub": "https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}templates/buckets.template"
                }
            },
            "Type": "AWS::CloudFormation::Stack"
        },
        "CommunicationWorkerServerStack": {
            "Properties": {
                "Parameters": {
                    "CommunicationWorkerServerInstanceProfileARN": {
                        "Fn::GetAtt": [
                            "IAMStack",
                            "Outputs.CommunicationWorkerServerInstanceProfileARN"
                        ]
                    },
                    "EventsStatusTable": {
                        "Fn::GetAtt": [
                            "DatabaseStack",
                            "Outputs.EventsStatusTable"
                        ]
                    },
                    "InstanceType": {
                        "Ref": "WorkerInstanceType"
                    },
                    "KeyName": {
                        "Ref": "KeyName"
                    },
                    "PiPointsTableName": {
                        "Fn::Join": [
                            "-",
                            [
                                {
                                    "Fn::FindInMap": [
                                        "Constants",
                                        "TableNames",
                                        "PiPointsTableNamePrefix"
                                    ]
                                },
                                {
                                    "Ref": "QSDeploymentSuffix"
                                }
                            ]
                        ]
                    },
                    "PrivateSubnet1ID": {
                        "Ref": "PrivateSubnet1ID"
                    },
                    "PrivateSubnet2ID": {
                        "Ref": "PrivateSubnet2ID"
                    },
                    "QSDeploymentSuffix": {
                        "Ref": "QSDeploymentSuffix"
                    },
                    "QSS3Bucket": {
                        "Ref": "QSS3BucketName"
                    },
                    "QSS3KeyPrefix": {
                        "Ref": "QSS3KeyPrefix"
                    },
                    "VPCCIDR": {
                        "Ref": "VPCCIDR"
                    },
                    "VpcId": {
                        "Ref": "VPCID"
                    }
                },
                "TemplateURL": {
                    "Fn::Sub": "https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}templates/communication-worker-server.template"
                }
            },
            "Type": "AWS::CloudFormation::Stack"
        },
        "Connector": {
            "DependsOn": [
                "CopyLambdaDeploymentStack",
                "CopyLicencedBinaryLambdaStack"
            ],
            "Properties": {
                "Parameters": {
                    "AFDomainName": {
                        "Ref": "AFDomainName"
                    },
                    "AFPassword": {
                        "Ref": "AFPassword"
                    },
                    "AFPort": {
                        "Ref": "AFPort"
                    },
                    "AFServerIP": {
                        "Ref": "AFServerIP"
                    },
                    "AFUser": {
                        "Ref": "AFUser"
                    },
                    "AuthType": {
                        "Ref": "AuthType"
                    },
                    "ConnectorInstanceProfileARN": {
                        "Fn::GetAtt": [
                            "IAMStack",
                            "Outputs.ConnectorInstanceProfileARN"
                        ]
                    },
                    "DomainControllerServerIP": {
                        "Ref": "DomainControllerServerIP"
                    },
                    "ElasticsearchDomainEndpoint": {
                        "Fn::GetAtt": [
                            "ElasticsearchStack",
                            "Outputs.DomainEndpoint"
                        ]
                    },
                    "IncomingQueueUrl": {
                        "Fn::GetAtt": [
                            "CommunicationWorkerServerStack",
                            "Outputs.IncomingQueueURL"
                        ]
                    },
                    "InstanceType": {
                        "Ref": "ConnectorInstanceType"
                    },
                    "KeyName": {
                        "Ref": "KeyName"
                    },
                    "KinesisStreamName": {
                        "Fn::GetAtt": [
                            "StreamsStack",
                            "Outputs.KinesisStreamName"
                        ]
                    },
                    "LicensedSoftwareS3KeyPrefix": {
                        "Fn::FindInMap": [
                            "Constants",
                            "Buckets",
                            "LicencedBinaryDestinationKeyPrefix"
                        ]
                    },
                    "LogGroupName": {
                        "Fn::Sub": "${LogGroupNamePrefix}-${QSDeploymentSuffix}"
                    },
                    "LogsToElasticsearchRoleARN": {
                        "Fn::GetAtt": [
                            "IAMStack",
                            "Outputs.LogsToElasticsearchRoleARN"
                        ]
                    },
                    "MetricNamespaceName": {
                        "Fn::Sub": "${MetricNamespaceNamePrefix}-${QSDeploymentSuffix}"
                    },
                    "OutgoingQueueUrl": {
                        "Fn::GetAtt": [
                            "CommunicationWorkerServerStack",
                            "Outputs.OutgoingQueueURL"
                        ]
                    },
                    "PIPassword": {
                        "Ref": "PIPassword"
                    },
                    "PIPort": {
                        "Ref": "PIPort"
                    },
                    "PIServerIP": {
                        "Ref": "PIServerIP"
                    },
                    "PIUser": {
                        "Ref": "PIUser"
                    },
                    "PiPointsTableName": {
                        "Fn::Join": [
                            "-",
                            [
                                {
                                    "Fn::FindInMap": [
                                        "Constants",
                                        "TableNames",
                                        "PiPointsTableNamePrefix"
                                    ]
                                },
                                {
                                    "Ref": "QSDeploymentSuffix"
                                }
                            ]
                        ]
                    },
                    "PublicSubnet1ID": {
                        "Ref": "PublicSubnet1ID"
                    },
                    "PublicSubnet2ID": {
                        "Ref": "PublicSubnet2ID"
                    },
                    "QSDeploymentSuffix": {
                        "Ref": "QSDeploymentSuffix"
                    },
                    "RegionalLambdaBucketARN": {
                        "Fn::GetAtt": [
                            "BucketsStack",
                            "Outputs.RegionalLambdaBucketARN"
                        ]
                    },
                    "RegionalLambdaBucketName": {
                        "Fn::GetAtt": [
                            "BucketsStack",
                            "Outputs.RegionalLambdaBucketName"
                        ]
                    },
                    "RemoteAccessCIDR": {
                        "Ref": "RemoteAccessCIDR"
                    },
                    "StateS3Bucket": {
                        "Fn::GetAtt": [
                            "AthenaPartitionsStack",
                            "Outputs.CuratedDatasetsBucketName"
                        ]
                    },
                    "VpcId": {
                        "Ref": "VPCID"
                    },
                    "WISFQDN": {
                        "Ref": "WISFQDN"
                    },
                    "WISPassword": {
                        "Ref": "WISPassword"
                    },
                    "WISUser": {
                        "Ref": "WISUser"
                    }
                },
                "TemplateURL": {
                    "Fn::Sub": "https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}templates/connector.template"
                }
            },
            "Type": "AWS::CloudFormation::Stack"
        },
        "CopyLambdaDeploymentStack": {
            "Properties": {
                "Parameters": {
                    "CopyLambdaDeploymentRoleARN": {
                        "Fn::GetAtt": [
                            "IAMStack",
                            "Outputs.CopyLambdaDeploymentRoleARN"
                        ]
                    },
                    "QSS3BucketName": {
                        "Ref": "QSS3BucketName"
                    },
                    "QSS3KeyPrefix": {
                        "Ref": "QSS3KeyPrefix"
                    },
                    "RegionalLambdaBucketName": {
                        "Fn::GetAtt": [
                            "BucketsStack",
                            "Outputs.RegionalLambdaBucketName"
                        ]
                    }
                },
                "TemplateURL": {
                    "Fn::Sub": "https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}templates/copy-lambda-deployment.template"
                }
            },
            "Type": "AWS::CloudFormation::Stack"
        },
        "CopyLicencedBinaryLambdaStack": {
            "DependsOn": [
                "CopyLambdaDeploymentStack"
            ],
            "Properties": {
                "Parameters": {
                    "ConnectorAgentAssetsS3BucketName": {
                        "Ref": "ConnectorAgentAssetsS3BucketName"
                    },
                    "ConnectorAgentAssetsS3KeyPrefix": {
                        "Ref": "ConnectorAgentAssetsS3KeyPrefix"
                    },
                    "CopyLicencedBinaryLambdaRoleARN": {
                        "Fn::GetAtt": [
                            "IAMStack",
                            "Outputs.CopyLicencedBinaryLambdaRoleARN"
                        ]
                    },
                    "LicencedBinaryDestinationKeyPrefix": {
                        "Fn::FindInMap": [
                            "Constants",
                            "Buckets",
                            "LicencedBinaryDestinationKeyPrefix"
                        ]
                    },
                    "LicensedSoftwareS3BucketName": {
                        "Ref": "LicensedSoftwareS3BucketName"
                    },
                    "LicensedSoftwareS3KeyPrefix": {
                        "Ref": "LicensedSoftwareS3KeyPrefix"
                    },
                    "RegionalLambdaBucketName": {
                        "Fn::GetAtt": [
                            "BucketsStack",
                            "Outputs.RegionalLambdaBucketName"
                        ]
                    }
                },
                "TemplateURL": {
                    "Fn::Sub": "https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}templates/copy-licenced-binary-lambda.template"
                }
            },
            "Type": "AWS::CloudFormation::Stack"
        },
        "DatabaseStack": {
            "Properties": {
                "Parameters": {
                    "EventsStatusTableName": {
                        "Fn::Join": [
                            "-",
                            [
                                {
                                    "Fn::FindInMap": [
                                        "Constants",
                                        "TableNames",
                                        "EventsStatusTableNamePrefix"
                                    ]
                                },
                                {
                                    "Ref": "QSDeploymentSuffix"
                                }
                            ]
                        ]
                    },
                    "PiPointsTableName": {
                        "Fn::Join": [
                            "-",
                            [
                                {
                                    "Fn::FindInMap": [
                                        "Constants",
                                        "TableNames",
                                        "PiPointsTableNamePrefix"
                                    ]
                                },
                                {
                                    "Ref": "QSDeploymentSuffix"
                                }
                            ]
                        ]
                    },
                    "ReadCapacity": {
                        "Ref": "ReadCapacity"
                    },
                    "WriteCapacity": {
                        "Ref": "WriteCapacity"
                    }
                },
                "TemplateURL": {
                    "Fn::Sub": "https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}templates/db.template"
                }
            },
            "Type": "AWS::CloudFormation::Stack"
        },
        "ElasticsearchCleanLambdaStack": {
            "DependsOn": [
                "CopyLambdaDeploymentStack"
            ],
            "Properties": {
                "Parameters": {
                    "ElasticsearchEndpoint": {
                        "Fn::GetAtt": [
                            "ElasticsearchStack",
                            "Outputs.DomainEndpoint"
                        ]
                    },
                    "ElasticsearchIndexCleanLambdaRoleARN": {
                        "Fn::GetAtt": [
                            "IAMStack",
                            "Outputs.ElasticsearchIndexCleanLambdaRoleARN"
                        ]
                    },
                    "IndexPrefix": "managed_feeds",
                    "MaxIndexAge": {
                        "Ref": "MaxIndexAge"
                    },
                    "RegionalLambdaBucketName": {
                        "Fn::GetAtt": [
                            "BucketsStack",
                            "Outputs.RegionalLambdaBucketName"
                        ]
                    }
                },
                "TemplateURL": {
                    "Fn::Sub": "https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}templates/elasticsearch-clean-lambda.template"
                }
            },
            "Type": "AWS::CloudFormation::Stack"
        },
        "ElasticsearchStack": {
            "Properties": {
                "Parameters": {
                    "ElasticsearchAccessCIDR": {
                        "Ref": "RemoteAccessCIDR"
                    },
                    "ElasticsearchNodeCount": {
                        "Ref": "ElasticsearchNodeCount"
                    },
                    "ElasticsearchNodeType": {
                        "Ref": "ElasticsearchNodeType"
                    }
                },
                "TemplateURL": {
                    "Fn::Sub": "https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}templates/elasticsearch.template"
                }
            },
            "Type": "AWS::CloudFormation::Stack"
        },
        "IAMStack": {
            "Properties": {
                "Parameters": {
                    "ConnectorAgentAssetsS3BucketName": {
                        "Ref": "ConnectorAgentAssetsS3BucketName"
                    },
                    "ConnectorLogGroupName": {
                        "Fn::Sub": "${LogGroupNamePrefix}-${QSDeploymentSuffix}"
                    },
                    "CuratedDatasetsBucketName": {
                        "Fn::Sub": [
                            "${CuratedDatasetNamePrefix}-${AWS::AccountId}-${AWS::Region}-${QSDeploymentSuffix}",
                            {
                                "CuratedDatasetNamePrefix": {
                                    "Fn::FindInMap": [
                                        "Constants",
                                        "Buckets",
                                        "CuratedDatasetsNamePrefix"
                                    ]
                                }
                            }
                        ]
                    },
                    "EventsStatusTableARN": {
                        "Fn::GetAtt": [
                            "DatabaseStack",
                            "Outputs.EventsStatusTableARN"
                        ]
                    },
                    "LicensedSoftwareS3BucketName": {
                        "Ref": "LicensedSoftwareS3BucketName"
                    },
                    "PiPointsTableARN": {
                        "Fn::GetAtt": [
                            "DatabaseStack",
                            "Outputs.PiPointsTableARN"
                        ]
                    },
                    "PublishedDataBucketName": {
                        "Fn::Sub": [
                            "${PublishedDataNamePrefix}-${AWS::AccountId}-${AWS::Region}-${QSDeploymentSuffix}",
                            {
                                "PublishedDataNamePrefix": {
                                    "Fn::FindInMap": [
                                        "Constants",
                                        "Buckets",
                                        "PublishedDataNamePrefix"
                                    ]
                                }
                            }
                        ]
                    },
                    "QSS3BucketName": {
                        "Ref": "QSS3BucketName"
                    },
                    "RegionalLambdaBucketARN": {
                        "Fn::GetAtt": [
                            "BucketsStack",
                            "Outputs.RegionalLambdaBucketARN"
                        ]
                    }
                },
                "TemplateURL": {
                    "Fn::Sub": "https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}templates/iam.template"
                }
            },
            "Type": "AWS::CloudFormation::Stack"
        },
        "ManagementConsoleStack": {
            "Properties": {
                "Parameters": {
                    "AfStructureDatabase": {
                        "Ref": "AfStructureDatabase"
                    },
                    "ApplicationPassword": {
                        "Ref": "ApplicationPassword"
                    },
                    "ApplicationUser": {
                        "Ref": "ApplicationUser"
                    },
                    "AthenaDatabaseName": {
                        "Fn::GetAtt": [
                            "AthenaPartitionsStack",
                            "Outputs.AthenaDatabaseName"
                        ]
                    },
                    "AthenaTableName": {
                        "Fn::GetAtt": [
                            "AthenaPartitionsStack",
                            "Outputs.AthenaTableName"
                        ]
                    },
                    "CuratedDatasetsBucketName": {
                        "Fn::GetAtt": [
                            "AthenaPartitionsStack",
                            "Outputs.CuratedDatasetsBucketName"
                        ]
                    },
                    "EventsStatusTableName": {
                        "Fn::Join": [
                            "-",
                            [
                                {
                                    "Fn::FindInMap": [
                                        "Constants",
                                        "TableNames",
                                        "EventsStatusTableNamePrefix"
                                    ]
                                },
                                {
                                    "Ref": "QSDeploymentSuffix"
                                }
                            ]
                        ]
                    },
                    "IncomingQueueName": {
                        "Fn::GetAtt": [
                            "CommunicationWorkerServerStack",
                            "Outputs.IncomingQueueName"
                        ]
                    },
                    "InstanceType": {
                        "Ref": "InstanceType"
                    },
                    "KeyName": {
                        "Ref": "KeyName"
                    },
                    "ManagementConsoleInstanceProfileARN": {
                        "Fn::GetAtt": [
                            "IAMStack",
                            "Outputs.ManagementConsoleInstanceProfileARN"
                        ]
                    },
                    "PiPointsTableName": {
                        "Fn::Join": [
                            "-",
                            [
                                {
                                    "Fn::FindInMap": [
                                        "Constants",
                                        "TableNames",
                                        "PiPointsTableNamePrefix"
                                    ]
                                },
                                {
                                    "Ref": "QSDeploymentSuffix"
                                }
                            ]
                        ]
                    },
                    "PrivateSubnet1ID": {
                        "Ref": "PrivateSubnet1ID"
                    },
                    "PrivateSubnet2ID": {
                        "Ref": "PrivateSubnet2ID"
                    },
                    "PublicSubnet1ID": {
                        "Ref": "PublicSubnet1ID"
                    },
                    "PublicSubnet2ID": {
                        "Ref": "PublicSubnet2ID"
                    },
                    "PublishedDataBucketName": {
                        "Fn::GetAtt": [
                            "BucketsStack",
                            "Outputs.PublishedDataBucketName"
                        ]
                    },
                    "QSDeploymentSuffix": {
                        "Ref": "QSDeploymentSuffix"
                    },
                    "QSS3BucketName": {
                        "Ref": "QSS3BucketName"
                    },
                    "QSS3KeyPrefix": {
                        "Ref": "QSS3KeyPrefix"
                    },
                    "VPCCIDR": {
                        "Ref": "VPCCIDR"
                    },
                    "VpcId": {
                        "Ref": "VPCID"
                    }
                },
                "TemplateURL": {
                    "Fn::Sub": "https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}templates/management-console.template"
                }
            },
            "Type": "AWS::CloudFormation::Stack"
        },
        "StreamsStack": {
            "DependsOn": [
                "CopyLambdaDeploymentStack"
            ],
            "Properties": {
                "Parameters": {
                    "CuratedDatasetsBucketARN": {
                        "Fn::GetAtt": [
                            "AthenaPartitionsStack",
                            "Outputs.CuratedDatasetsBucketARN"
                        ]
                    },
                    "ElasticsearchAccessRoleARN": {
                        "Fn::GetAtt": [
                            "IAMStack",
                            "Outputs.ElasticsearchAccessRoleARN"
                        ]
                    },
                    "ElasticsearchBucketRoleARN": {
                        "Fn::GetAtt": [
                            "IAMStack",
                            "Outputs.ElasticsearchBucketRoleARN"
                        ]
                    },
                    "ElasticsearchDomainARN": {
                        "Fn::GetAtt": [
                            "ElasticsearchStack",
                            "Outputs.DomainARN"
                        ]
                    },
                    "ElasticsearchEndpoint": {
                        "Fn::GetAtt": [
                            "ElasticsearchStack",
                            "Outputs.DomainEndpoint"
                        ]
                    },
                    "KinesisAnalyticsLambdaRoleARN": {
                        "Fn::GetAtt": [
                            "IAMStack",
                            "Outputs.KinesisAnalyticsLambdaRoleARN"
                        ]
                    },
                    "KinesisStreamsShardsCount": {
                        "Ref": "KinesisStreamsShardsCount"
                    },
                    "ManagedFeedsBucketRoleARN": {
                        "Fn::GetAtt": [
                            "IAMStack",
                            "Outputs.ManagedFeedsBucketRoleARN"
                        ]
                    },
                    "QSDeploymentSuffix": {
                        "Ref": "QSDeploymentSuffix"
                    },
                    "QSS3BucketName": {
                        "Ref": "QSS3BucketName"
                    },
                    "QSS3KeyPrefix": {
                        "Ref": "QSS3KeyPrefix"
                    },
                    "RegionalLambdaBucketName": {
                        "Fn::GetAtt": [
                            "BucketsStack",
                            "Outputs.RegionalLambdaBucketName"
                        ]
                    },
                    "RegisterKibanaDashboardRoleARN": {
                        "Fn::GetAtt": [
                            "IAMStack",
                            "Outputs.RegisterKibanaDashboardRoleARN"
                        ]
                    },
                    "StreamsAccessRoleARN": {
                        "Fn::GetAtt": [
                            "IAMStack",
                            "Outputs.StreamsAccessRoleARN"
                        ]
                    }
                },
                "TemplateURL": {
                    "Fn::Sub": "https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}templates/streams.template"
                }
            },
            "Type": "AWS::CloudFormation::Stack"
        }
    },
    "Outputs": {
        "ManagementConsoleURL": {
            "Value": {
                "Fn::GetAtt": [
                    "ManagementConsoleStack",
                    "Outputs.ManagementConsoleEndpoint"
                ]
            },
            "Description": "Management Console URL"
        },
        "ElasticsearchEndpoint": {
            "Value": {
                "Fn::GetAtt": [
                    "ElasticsearchStack",
                    "Outputs.DomainEndpoint"
                ]
            },
            "Description": "Elasticsearch domain endpoint"
        },
        "CuratedBucketName": {
            "Value": {
                "Fn::GetAtt": [
                    "AthenaPartitionsStack",
                    "Outputs.CuratedDatasetsBucketName"
                ]
            },
            "Description": "Bucket name for Curated Datasets"
        },
        "PublishedBucketName": {
            "Value": {
                "Fn::GetAtt": [
                    "BucketsStack",
                    "Outputs.PublishedDataBucketName"
                ]
            },
            "Description": "Bucket name for Published Data"
        },
        "SubmissionsBucketName": {
            "Value": {
                "Fn::GetAtt": [
                    "BucketsStack",
                    "Outputs.SubmissionsBucketName"
                ]
            },
            "Description": "Bucket name for submissions"
        },
        "KinesisStreamName": {
            "Value": {
                "Fn::GetAtt": [
                    "StreamsStack",
                    "Outputs.KinesisStreamName"
                ]
            },
            "Description": "Kinesis PI Points data stream name"
        }
    }
}
