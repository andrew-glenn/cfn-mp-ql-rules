{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "This templates creates a stack for JUPITER in an existing VPC. **WARNING** You will be billed for the AWS resources used if you create a stack from this template. (qs-1ogq8r0mg)",
    "Metadata": {
        "AWS::CloudFormation::Interface": {
            "ParameterGroups": [
                {
                    "Label": {
                        "default": "Network Configuration"
                    },
                    "Parameters": [
                        "VpcId",
                        "PublicSubnetIds",
                        "PrivateSubnetIds",
                        "RemoteAccessCIDR"
                    ]
                },
                {
                    "Label": {
                        "default": "AWS Elastic Beanstalk"
                    },
                    "Parameters": [
                        "SolutionStackName",
                        "KeyPairName",
                        "JupiterSSLCert",
                        "JupiterInstanceType"
                    ]
                },
                {
                    "Label": {
                        "default": "Database Configuration"
                    },
                    "Parameters": [
                        "DBName",
                        "DbEngine",
                        "DbClass",
                        "MasterDBUser",
                        "MasterDBPassword"
                    ]
                },
                {
                    "Label": {
                        "default": "Amazon EMR Configuration"
                    },
                    "Parameters": [
                        "CreateEmr",
                        "EmrMasterInstanceType",
                        "EmrCoreInstanceType",
                        "EmrCoreNodes",
                        "EmrLogBucket"
                    ]
                },
                {
                    "Label": {
                        "default": "Quick Start Configuration"
                    },
                    "Parameters": [
                        "QSS3BucketName",
                        "QSS3KeyPrefix"
                    ]
                }
            ],
            "ParameterLabels": {
                "CreateEmr": {
                    "default": "Create Amazon EMR cluster"
                },
                "DBName": {
                    "default": "Database Name"
                },
                "DbClass": {
                    "default": "Database Instance Type"
                },
                "DbEngine": {
                    "default": "Database Engine"
                },
                "EmrCoreInstanceType": {
                    "default": "Amazon EMR Core Instance Type"
                },
                "EmrCoreNodes": {
                    "default": "Amazon EMR Core Nodes"
                },
                "EmrLogBucket": {
                    "default": "Amazon EMR Log Bucket"
                },
                "EmrMasterInstanceType": {
                    "default": "Amazon EMR Master Instance Type"
                },
                "JupiterInstanceType": {
                    "default": "EC2 Instance Type"
                },
                "JupiterSSLCert": {
                    "default": "Jupiter SSL Certificate"
                },
                "KeyPairName": {
                    "default": "Key Pair Name"
                },
                "MasterDBPassword": {
                    "default": "Password for Database Master User"
                },
                "MasterDBUser": {
                    "default": "Database Master Username"
                },
                "PrivateSubnetIds": {
                    "default": "Private Subnet Ids"
                },
                "PublicSubnetIds": {
                    "default": "Public Subnet Ids"
                },
                "QSS3BucketName": {
                    "default": "Quick Start S3 Bucket"
                },
                "QSS3KeyPrefix": {
                    "default": "Quick Start S3 Key Prefix"
                },
                "RemoteAccessCIDR": {
                    "default": "Remote Access CIDR"
                },
                "SolutionStackName": {
                    "default": "AWS Elastic Beanstalk technology stack"
                },
                "VpcId": {
                    "default": "VPC ID"
                }
            }
        }
    },
    "Parameters": {
        "CreateEmr": {
            "AllowedValues": [
                "true",
                "false"
            ],
            "Default": "true",
            "Description": "Set this to true to create a new Amazon EMR cluster. If you do not wish to use Amazon EMR or want to use an existing Amazon EMR cluster, set this to false.",
            "Type": "String"
        },
        "DBName": {
            "AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
            "ConstraintDescription": "must begin with a letter and contain only alphanumeric characters.",
            "Default": "jupiterdb",
            "Description": "The database name",
            "MaxLength": "64",
            "MinLength": "1",
            "Type": "String"
        },
        "DbClass": {
            "AllowedValues": [
                "db.t2.micro",
                "db.t2.small",
                "db.t2.medium",
                "db.t2.large",
                "db.m4.large",
                "db.m4.xlarge",
                "db.m4.2xlarge",
                "db.m4.4xlarge",
                "db.m4.10xlarge",
                "db.r3.large",
                "db.r3.xlarge",
                "db.r3.2xlarge",
                "db.r3.4xlarge",
                "db.r3.8xlarge"
            ],
            "Default": "db.t2.micro",
            "Description": "Instance class of Amazon RDS instance",
            "Type": "String"
        },
        "DbEngine": {
            "AllowedValues": [
                "mysql",
                "postgres"
            ],
            "Default": "mysql",
            "Description": "Type of Amazon RDS instance",
            "Type": "String"
        },
        "EmrCoreInstanceType": {
            "AllowedValues": [
                "m1.medium",
                "m1.large",
                "m1.xlarge",
                "m2.xlarge",
                "m2.2xlarge",
                "m2.4xlarge",
                "m3.xlarge",
                "m3.2xlarge",
                "m4.large",
                "m4.xlarge",
                "m4.2xlarge",
                "m4.4xlarge",
                "m4.10xlarge",
                "m4.16xlarge",
                "c4.xlarge",
                "c4.2xlarge",
                "c4.4xlarge",
                "c4.8xlarge",
                "r4.large",
                "r4.xlarge",
                "r4.2xlarge",
                "r4.4xlarge",
                "r4.8xlarge",
                "r4.16xlarge",
                "d2.xlarge",
                "d2.2xlarge",
                "d2.4xlarge",
                "d2.8xlarge",
                "i3.large",
                "i3.xlarge",
                "i3.2xlarge",
                "i3.4xlarge",
                "i3.8xlarge",
                "i3.16xlarge"
            ],
            "Default": "m1.medium",
            "Description": "Instance type for the Amazon EMR core nodes",
            "Type": "String"
        },
        "EmrCoreNodes": {
            "Default": "1",
            "Description": "Number of Amazon EMR core Nodes. Minimum 1",
            "MaxValue": "500",
            "MinValue": "1",
            "Type": "Number"
        },
        "EmrLogBucket": {
            "AllowedPattern": "^[0-9a-zA-Z]+([0-9a-zA-Z-.]*[0-9a-zA-Z])*$",
            "ConstraintDescription": "S3 bucket name can include numbers, lowercase letters, uppercase letters, periods (.), and hyphens (-). It cannot start or end with a hyphen (-) or period (.).",
            "Description": "S3 bucket that will be used to store EMR logs. Only needed if EMR will be used.  This bucket must be in the same region where this stack is being deployed. Bucket name can include numbers, lowercase letters, uppercase letters, periods (.), and hyphens (-). It cannot start or end with a hyphen (-) or period (.).",
            "Type": "String"
        },
        "EmrMasterInstanceType": {
            "AllowedValues": [
                "m1.medium",
                "m1.large",
                "m1.xlarge",
                "m2.xlarge",
                "m2.2xlarge",
                "m2.4xlarge",
                "m3.xlarge",
                "m3.2xlarge",
                "m4.large",
                "m4.xlarge",
                "m4.2xlarge",
                "m4.4xlarge",
                "m4.10xlarge",
                "m4.16xlarge",
                "c4.xlarge",
                "c4.2xlarge",
                "c4.4xlarge",
                "c4.8xlarge",
                "r4.large",
                "r4.xlarge",
                "r4.2xlarge",
                "r4.4xlarge",
                "r4.8xlarge",
                "r4.16xlarge",
                "d2.xlarge",
                "d2.2xlarge",
                "d2.4xlarge",
                "d2.8xlarge",
                "i3.large",
                "i3.xlarge",
                "i3.2xlarge",
                "i3.4xlarge",
                "i3.8xlarge",
                "i3.16xlarge"
            ],
            "Default": "m1.medium",
            "Description": "Instance type for the Amazon EMR master node",
            "Type": "String"
        },
        "JupiterInstanceType": {
            "AllowedValues": [
                "t1.micro",
                "t2.micro",
                "t2.small",
                "t2.medium",
                "m1.small",
                "m1.medium",
                "m1.large",
                "m1.xlarge",
                "m2.xlarge",
                "m2.2xlarge",
                "m2.4xlarge",
                "m3.medium",
                "m3.large",
                "m3.xlarge",
                "m3.2xlarge",
                "c1.medium",
                "c1.xlarge",
                "c3.large",
                "c3.xlarge",
                "c3.2xlarge",
                "c3.4xlarge",
                "c3.8xlarge",
                "c4.large",
                "c4.xlarge",
                "c4.2xlarge",
                "c4.4xlarge",
                "c4.8xlarge",
                "g2.2xlarge",
                "r3.large",
                "r3.xlarge",
                "r3.2xlarge",
                "r3.4xlarge",
                "r3.8xlarge",
                "i2.xlarge",
                "i2.2xlarge",
                "i2.4xlarge",
                "i2.8xlarge",
                "d2.xlarge",
                "d2.2xlarge",
                "d2.4xlarge",
                "d2.8xlarge",
                "hi1.4xlarge",
                "hs1.8xlarge",
                "cr1.8xlarge",
                "cc2.8xlarge",
                "cg1.4xlarge"
            ],
            "ConstraintDescription": "must be a valid EC2 instance type.",
            "Default": "t2.micro",
            "Description": "JUPITER EC2 instance type",
            "Type": "String"
        },
        "JupiterSSLCert": {
            "Default": "",
            "Description": "ARN of the SSL certificate for terminating HTTPS connections on the load balancer; leave this blank to disable SSL, however it is strongly recommended to turn on SSL in production environments",
            "Type": "String"
        },
        "KeyPairName": {
            "Description": "Public/private key pairs allow you to securely connect to your instance after it launches",
            "Type": "AWS::EC2::KeyPair::KeyName"
        },
        "MasterDBPassword": {
            "AllowedPattern": "[a-zA-Z0-9!^*\\-_+]*",
            "ConstraintDescription": "Can only contain alphanumeric characters or the following special characters !^*-_+",
            "Description": "Master user password for database. Can only contain alphanumeric characters or the following special characters !^*-_+",
            "MaxLength": 28,
            "MinLength": 8,
            "NoEcho": true,
            "Type": "String"
        },
        "MasterDBUser": {
            "AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
            "ConstraintDescription": "must begin with a letter and contain only alphanumeric characters.",
            "Default": "jupiter",
            "Description": "Master user name for database",
            "MaxLength": "16",
            "MinLength": "1",
            "Type": "String"
        },
        "PrivateSubnetIds": {
            "Description": "IDs of Private Subnets in the existing VPC; select at least two subnets",
            "Type": "List<AWS::EC2::Subnet::Id>"
        },
        "PublicSubnetIds": {
            "Description": "IDs of Public Subnets in the existing VPC; select at least one subnet",
            "Type": "List<AWS::EC2::Subnet::Id>"
        },
        "QSS3BucketName": {
            "AllowedPattern": "^[0-9a-zA-Z]+([0-9a-zA-Z-.]*[0-9a-zA-Z])*$",
            "ConstraintDescription": "Quick Start bucket name can include numbers, lowercase letters, uppercase letters, periods (.), and hyphens (-). It cannot start or end with a hyphen (-) or period (.).",
            "Default": "aws-quickstart",
            "Description": "S3 bucket name for the Quick Start assets. Quick Start bucket name can include numbers, lowercase letters, uppercase letters, periods (.), and hyphens (-). It cannot start or end with a hyphen (-) or period (.).",
            "Type": "String"
        },
        "QSS3KeyPrefix": {
            "AllowedPattern": "^[0-9a-zA-Z-/]*$",
            "ConstraintDescription": "Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/).  Prefix cannot start with a slash but must end with a slash unless it is the empty string.",
            "Default": "quickstart-cognizant-jupiter/",
            "Description": "The S3 key name prefix used to simulate a folder for your copy of Quick Start assets, if you decide to customize or extend the Quick Start for your own use. This prefix can include numbers, lowercase letters, uppercase letters, hyphens, and forward slashes",
            "Type": "String"
        },
        "RemoteAccessCIDR": {
            "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$",
            "ConstraintDescription": "CIDR block parameter must be in the form x.x.x.x/x",
            "Description": "You can provide a single IP or IP range from which you would be connecting to the AWS Elastic Beanstalk Load balancer. By default, HTTP and HTTPS access is restricted to the IP address(es) provided.",
            "Type": "String"
        },
        "SolutionStackName": {
            "AllowedValues": [
                "64bit Amazon Linux 2018.03 v3.0.7 running Tomcat 8 Java 8",
                "64bit Amazon Linux 2018.03 v3.0.7 running Tomcat 7 Java 7",
                "64bit Amazon Linux 2018.03 v3.0.7 running Tomcat 7 Java 6"
            ],
            "ConstraintDescription": "Must be a valid and supported technology stack on AWS Elastic Beanstalk",
            "Default": "64bit Amazon Linux 2018.03 v3.0.7 running Tomcat 8 Java 8",
            "Description": "AWS Elastic Beanstalk technology stack",
            "Type": "String"
        },
        "VpcId": {
            "Description": "ID of the existing VPC where the AWS resources will be deployed through the CloudFormation templates",
            "Type": "AWS::EC2::VPC::Id"
        }
    },
    "Mappings": {
        "RegionMap": {
            "ap-northeast-1": {
                "EmrVersion": "emr-5.9.0"
            },
            "ap-northeast-2": {
                "EmrVersion": "emr-5.9.0"
            },
            "ap-south-1": {
                "EmrVersion": "emr-5.9.0"
            },
            "ap-southeast-1": {
                "EmrVersion": "emr-5.9.0"
            },
            "ap-southeast-2": {
                "EmrVersion": "emr-5.9.0"
            },
            "ca-central-1": {
                "EmrVersion": "emr-5.9.0"
            },
            "eu-central-1": {
                "EmrVersion": "emr-5.9.0"
            },
            "eu-west-1": {
                "EmrVersion": "emr-5.9.0"
            },
            "eu-west-2": {
                "EmrVersion": "emr-5.9.0"
            },
            "sa-east-1": {
                "EmrVersion": "emr-5.9.0"
            },
            "us-east-1": {
                "EmrVersion": "emr-5.9.0"
            },
            "us-east-2": {
                "EmrVersion": "emr-5.9.0"
            },
            "us-west-1": {
                "EmrVersion": "emr-5.9.0"
            },
            "us-west-2": {
                "EmrVersion": "emr-5.9.0"
            }
        },
        "DBOptions": {
            "mysql": {
                "TcpPort": "3306"
            },
            "postgres": {
                "TcpPort": "5432"
            }
        }
    },
    "Conditions": {
        "CreateEmrCondition": {
            "Fn::Equals": [
                "true",
                {
                    "Ref": "CreateEmr"
                }
            ]
        },
        "NoSSL": {
            "Fn::Equals": [
                "",
                {
                    "Ref": "JupiterSSLCert"
                }
            ]
        }
    },
    "Rules": {
        "SubnetsInVPC": {
            "Assertions": [
                {
                    "Assert": {
                        "Fn::EachMemberIn": [
                            {
                                "Fn::ValueOfAll": [
                                    "AWS::EC2::Subnet::Id",
                                    "VpcId"
                                ]
                            },
                            {
                                "Fn::RefAll": "AWS::EC2::VPC::Id"
                            }
                        ]
                    },
                    "AssertDescription": "Subnets must belong to specified VPC"
                }
            ]
        }
    },
    "Resources": {
        "JupiterBootstrapDownloadPolicy": {
            "Type": "AWS::IAM::Policy",
            "Condition": "CreateEmrCondition",
            "Properties": {
                "PolicyName": {
                    "Fn::Join": [
                        "-",
                        [
                            {
                                "Ref": "AWS::StackName"
                            },
                            "JupiterBootstrapDownloadPolicy"
                        ]
                    ]
                },
                "Roles": [
                    "EMR_DefaultRole"
                ],
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": [
                                "s3:GetObject"
                            ],
                            "Resource": [
                                {
                                    "Fn::Sub": "arn:aws:s3:::${QSS3BucketName}/*"
                                }
                            ]
                        }
                    ]
                }
            }
        },
        "JupiterIAMRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": [
                                "sts:AssumeRole"
                            ],
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            }
                        }
                    ],
                    "Version": "2012-10-17"
                },
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/AWSElasticBeanstalkWebTier",
                    "arn:aws:iam::aws:policy/AWSElasticBeanstalkWorkerTier",
                    "arn:aws:iam::aws:policy/AWSElasticBeanstalkMulticontainerDocker",
                    "arn:aws:iam::aws:policy/IAMSelfManageServiceSpecificCredentials",
                    "arn:aws:iam::aws:policy/AWSCertificateManagerReadOnly"
                ],
                "Policies": [
                    {
                        "PolicyName": "WarAccess",
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "s3:ListBucket"
                                    ],
                                    "Resource": [
                                        {
                                            "Fn::Join": [
                                                "",
                                                [
                                                    "arn:aws:s3:::jupiterqs-",
                                                    {
                                                        "Ref": "AWS::Region"
                                                    }
                                                ]
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "Action": [
                                        "s3:GetObject"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": [
                                        {
                                            "Fn::Join": [
                                                "",
                                                [
                                                    "arn:aws:s3:::jupiterqs-",
                                                    {
                                                        "Ref": "AWS::Region"
                                                    },
                                                    "/*"
                                                ]
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "DBSubnetGroup": {
            "Type": "AWS::RDS::DBSubnetGroup",
            "Properties": {
                "SubnetIds": {
                    "Ref": "PrivateSubnetIds"
                },
                "DBSubnetGroupDescription": "JUPITER database subnet group"
            }
        },
        "JupiterSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "VpcId": {
                    "Ref": "VpcId"
                },
                "GroupDescription": "Allow access to Jupiter application from remote access CIDR",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": 80,
                        "ToPort": 80,
                        "CidrIp": {
                            "Ref": "RemoteAccessCIDR"
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": 443,
                        "ToPort": 443,
                        "CidrIp": {
                            "Ref": "RemoteAccessCIDR"
                        }
                    }
                ]
            }
        },
        "JupiterEC2SecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "DependsOn": "JupiterSecurityGroup",
            "Properties": {
                "VpcId": {
                    "Ref": "VpcId"
                },
                "GroupDescription": "Allow access to Jupiter EC2 instances from the ELB",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": 80,
                        "ToPort": 80,
                        "SourceSecurityGroupId": {
                            "Ref": "JupiterSecurityGroup"
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": 443,
                        "ToPort": 443,
                        "SourceSecurityGroupId": {
                            "Ref": "JupiterSecurityGroup"
                        }
                    }
                ]
            }
        },
        "JupiterInstanceProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Roles": [
                    {
                        "Ref": "JupiterIAMRole"
                    }
                ]
            }
        },
        "JupiterBeanstalk": {
            "Type": "AWS::ElasticBeanstalk::Application",
            "Properties": {
                "ApplicationName": {
                    "Fn::Join": [
                        "-",
                        [
                            {
                                "Ref": "AWS::StackName"
                            },
                            "JupiterBeanstalk"
                        ]
                    ]
                },
                "Description": "AWS Elastic Beanstalk for JUPITER"
            }
        },
        "JupiterVersion": {
            "Type": "AWS::ElasticBeanstalk::ApplicationVersion",
            "Properties": {
                "ApplicationName": {
                    "Ref": "JupiterBeanstalk"
                },
                "Description": "JUPITER continuous testing",
                "SourceBundle": {
                    "S3Bucket": {
                        "Fn::Join": [
                            "",
                            [
                                "jupiterqs-",
                                {
                                    "Ref": "AWS::Region"
                                }
                            ]
                        ]
                    },
                    "S3Key": "jupiter.war"
                }
            }
        },
        "JupiterConfigurationTemplate": {
            "Type": "AWS::ElasticBeanstalk::ConfigurationTemplate",
            "DependsOn": [
                "JupiterDBInstance",
                "JupiterSecurityGroup"
            ],
            "Properties": {
                "ApplicationName": {
                    "Ref": "JupiterBeanstalk"
                },
                "Description": "JUPITER Configuration Template",
                "SolutionStackName": {
                    "Ref": "SolutionStackName"
                },
                "OptionSettings": {
                    "Fn::If": [
                        "NoSSL",
                        [
                            {
                                "Namespace": "aws:ec2:vpc",
                                "OptionName": "VPCId",
                                "Value": {
                                    "Ref": "VpcId"
                                }
                            },
                            {
                                "Namespace": "aws:ec2:vpc",
                                "OptionName": "ELBSubnets",
                                "Value": {
                                    "Fn::Join": [
                                        ",",
                                        {
                                            "Ref": "PublicSubnetIds"
                                        }
                                    ]
                                }
                            },
                            {
                                "Namespace": "aws:ec2:vpc",
                                "OptionName": "Subnets",
                                "Value": {
                                    "Fn::Join": [
                                        ",",
                                        {
                                            "Ref": "PrivateSubnetIds"
                                        }
                                    ]
                                }
                            },
                            {
                                "Namespace": "aws:ec2:vpc",
                                "OptionName": "DBSubnets",
                                "Value": {
                                    "Fn::Join": [
                                        ",",
                                        {
                                            "Ref": "PrivateSubnetIds"
                                        }
                                    ]
                                }
                            },
                            {
                                "Namespace": "aws:ec2:vpc",
                                "OptionName": "AssociatePublicIpAddress",
                                "Value": "false"
                            },
                            {
                                "Namespace": "aws:autoscaling:launchconfiguration",
                                "OptionName": "EC2KeyName",
                                "Value": {
                                    "Ref": "KeyPairName"
                                }
                            },
                            {
                                "Namespace": "aws:autoscaling:launchconfiguration",
                                "OptionName": "InstanceType",
                                "Value": {
                                    "Ref": "JupiterInstanceType"
                                }
                            },
                            {
                                "Namespace": "aws:autoscaling:launchconfiguration",
                                "OptionName": "IamInstanceProfile",
                                "Value": {
                                    "Fn::GetAtt": [
                                        "JupiterInstanceProfile",
                                        "Arn"
                                    ]
                                }
                            },
                            {
                                "Namespace": "aws:autoscaling:launchconfiguration",
                                "OptionName": "SecurityGroups",
                                "Value": {
                                    "Ref": "JupiterEC2SecurityGroup"
                                }
                            },
                            {
                                "Namespace": "aws:autoscaling:asg",
                                "OptionName": "MinSize",
                                "Value": "1"
                            },
                            {
                                "Namespace": "aws:autoscaling:asg",
                                "OptionName": "MaxSize",
                                "Value": "1"
                            },
                            {
                                "Namespace": "aws:elasticbeanstalk:environment",
                                "OptionName": "ServiceRole",
                                "Value": "aws-elasticbeanstalk-service-role"
                            },
                            {
                                "Namespace": "aws:elasticbeanstalk:environment",
                                "OptionName": "LoadBalancerType",
                                "Value": "classic"
                            },
                            {
                                "Namespace": "aws:elb:loadbalancer",
                                "OptionName": "SecurityGroups",
                                "Value": {
                                    "Ref": "JupiterSecurityGroup"
                                }
                            },
                            {
                                "Namespace": "aws:elb:loadbalancer",
                                "OptionName": "ManagedSecurityGroup",
                                "Value": {
                                    "Ref": "JupiterSecurityGroup"
                                }
                            },
                            {
                                "Namespace": "aws:elasticbeanstalk:application:environment",
                                "OptionName": "RDS_USERNAME",
                                "Value": {
                                    "Ref": "MasterDBUser"
                                }
                            },
                            {
                                "Namespace": "aws:elasticbeanstalk:application:environment",
                                "OptionName": "RDS_PASSWORD",
                                "Value": {
                                    "Ref": "MasterDBPassword"
                                }
                            },
                            {
                                "Namespace": "aws:elasticbeanstalk:application:environment",
                                "OptionName": "JDBC_CONNECTION_STRING",
                                "Value": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "jdbc:mysql://",
                                            {
                                                "Fn::GetAtt": [
                                                    "JupiterDBInstance",
                                                    "Endpoint.Address"
                                                ]
                                            },
                                            ":",
                                            {
                                                "Fn::GetAtt": [
                                                    "JupiterDBInstance",
                                                    "Endpoint.Port"
                                                ]
                                            },
                                            "/",
                                            {
                                                "Ref": "DBName"
                                            }
                                        ]
                                    ]
                                }
                            }
                        ],
                        [
                            {
                                "Namespace": "aws:ec2:vpc",
                                "OptionName": "VPCId",
                                "Value": {
                                    "Ref": "VpcId"
                                }
                            },
                            {
                                "Namespace": "aws:ec2:vpc",
                                "OptionName": "ELBSubnets",
                                "Value": {
                                    "Fn::Join": [
                                        ",",
                                        {
                                            "Ref": "PublicSubnetIds"
                                        }
                                    ]
                                }
                            },
                            {
                                "Namespace": "aws:ec2:vpc",
                                "OptionName": "Subnets",
                                "Value": {
                                    "Fn::Join": [
                                        ",",
                                        {
                                            "Ref": "PrivateSubnetIds"
                                        }
                                    ]
                                }
                            },
                            {
                                "Namespace": "aws:ec2:vpc",
                                "OptionName": "DBSubnets",
                                "Value": {
                                    "Fn::Join": [
                                        ",",
                                        {
                                            "Ref": "PrivateSubnetIds"
                                        }
                                    ]
                                }
                            },
                            {
                                "Namespace": "aws:ec2:vpc",
                                "OptionName": "AssociatePublicIpAddress",
                                "Value": "false"
                            },
                            {
                                "Namespace": "aws:autoscaling:launchconfiguration",
                                "OptionName": "EC2KeyName",
                                "Value": {
                                    "Ref": "KeyPairName"
                                }
                            },
                            {
                                "Namespace": "aws:autoscaling:launchconfiguration",
                                "OptionName": "InstanceType",
                                "Value": {
                                    "Ref": "JupiterInstanceType"
                                }
                            },
                            {
                                "Namespace": "aws:autoscaling:launchconfiguration",
                                "OptionName": "IamInstanceProfile",
                                "Value": {
                                    "Fn::GetAtt": [
                                        "JupiterInstanceProfile",
                                        "Arn"
                                    ]
                                }
                            },
                            {
                                "Namespace": "aws:autoscaling:launchconfiguration",
                                "OptionName": "SecurityGroups",
                                "Value": {
                                    "Ref": "JupiterEC2SecurityGroup"
                                }
                            },
                            {
                                "Namespace": "aws:autoscaling:asg",
                                "OptionName": "MinSize",
                                "Value": "1"
                            },
                            {
                                "Namespace": "aws:autoscaling:asg",
                                "OptionName": "MaxSize",
                                "Value": "1"
                            },
                            {
                                "Namespace": "aws:elasticbeanstalk:environment",
                                "OptionName": "ServiceRole",
                                "Value": "aws-elasticbeanstalk-service-role"
                            },
                            {
                                "Namespace": "aws:elasticbeanstalk:environment",
                                "OptionName": "LoadBalancerType",
                                "Value": "classic"
                            },
                            {
                                "Namespace": "aws:elb:loadbalancer",
                                "OptionName": "SecurityGroups",
                                "Value": {
                                    "Ref": "JupiterSecurityGroup"
                                }
                            },
                            {
                                "Namespace": "aws:elb:loadbalancer",
                                "OptionName": "ManagedSecurityGroup",
                                "Value": {
                                    "Ref": "JupiterSecurityGroup"
                                }
                            },
                            {
                                "Namespace": "aws:elb:loadbalancer",
                                "OptionName": "LoadBalancerHTTPSPort",
                                "Value": "443"
                            },
                            {
                                "Namespace": "aws:elb:loadbalancer",
                                "OptionName": "LoadBalancerSSLPortProtocol",
                                "Value": "HTTPS"
                            },
                            {
                                "Namespace": "aws:elb:loadbalancer",
                                "OptionName": "SSLCertificateId",
                                "Value": {
                                    "Ref": "JupiterSSLCert"
                                }
                            },
                            {
                                "Namespace": "aws:elasticbeanstalk:application:environment",
                                "OptionName": "RDS_USERNAME",
                                "Value": {
                                    "Ref": "MasterDBUser"
                                }
                            },
                            {
                                "Namespace": "aws:elasticbeanstalk:application:environment",
                                "OptionName": "RDS_PASSWORD",
                                "Value": {
                                    "Ref": "MasterDBPassword"
                                }
                            },
                            {
                                "Namespace": "aws:elasticbeanstalk:application:environment",
                                "OptionName": "JDBC_CONNECTION_STRING",
                                "Value": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "jdbc:mysql://",
                                            {
                                                "Fn::GetAtt": [
                                                    "JupiterDBInstance",
                                                    "Endpoint.Address"
                                                ]
                                            },
                                            ":",
                                            {
                                                "Fn::GetAtt": [
                                                    "JupiterDBInstance",
                                                    "Endpoint.Port"
                                                ]
                                            },
                                            "/",
                                            {
                                                "Ref": "DBName"
                                            }
                                        ]
                                    ]
                                }
                            }
                        ]
                    ]
                }
            }
        },
        "JupiterEnvironment": {
            "Type": "AWS::ElasticBeanstalk::Environment",
            "Properties": {
                "ApplicationName": {
                    "Ref": "JupiterBeanstalk"
                },
                "EnvironmentName": {
                    "Fn::Join": [
                        "-",
                        [
                            {
                                "Ref": "AWS::Region"
                            },
                            "JupiterEnvironment"
                        ]
                    ]
                },
                "Description": "JUPITER Environment",
                "TemplateName": {
                    "Ref": "JupiterConfigurationTemplate"
                },
                "VersionLabel": {
                    "Ref": "JupiterVersion"
                },
                "Tier": {
                    "Type": "Standard",
                    "Name": "WebServer"
                }
            }
        },
        "JupiterDBSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "DependsOn": "JupiterEC2SecurityGroup",
            "Properties": {
                "VpcId": {
                    "Ref": "VpcId"
                },
                "GroupDescription": "Allow access to DB from Autoscaling group",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": {
                            "Fn::FindInMap": [
                                "DBOptions",
                                {
                                    "Ref": "DbEngine"
                                },
                                "TcpPort"
                            ]
                        },
                        "ToPort": {
                            "Fn::FindInMap": [
                                "DBOptions",
                                {
                                    "Ref": "DbEngine"
                                },
                                "TcpPort"
                            ]
                        },
                        "SourceSecurityGroupId": {
                            "Ref": "JupiterEC2SecurityGroup"
                        }
                    }
                ]
            }
        },
        "JupiterDBInstance": {
            "Type": "AWS::RDS::DBInstance",
            "DependsOn": [
                "DBSubnetGroup",
                "JupiterDBSecurityGroup"
            ],
            "DeletionPolicy": "Delete",
            "Properties": {
                "DBName": {
                    "Ref": "DBName"
                },
                "Engine": {
                    "Ref": "DbEngine"
                },
                "AllocatedStorage": "20",
                "DBInstanceClass": {
                    "Ref": "DbClass"
                },
                "DBSubnetGroupName": {
                    "Ref": "DBSubnetGroup"
                },
                "VPCSecurityGroups": [
                    {
                        "Ref": "JupiterDBSecurityGroup"
                    }
                ],
                "MasterUsername": {
                    "Ref": "MasterDBUser"
                },
                "MasterUserPassword": {
                    "Ref": "MasterDBPassword"
                }
            }
        },
        "EmrMasterPrivateSecurityGroup": {
            "Condition": "CreateEmrCondition",
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Amazon EMR Master Instance security group",
                "VpcId": {
                    "Ref": "VpcId"
                }
            }
        },
        "EmrSlavePrivateSecurityGroup": {
            "Condition": "CreateEmrCondition",
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Amazon EMR Slave Instance security group",
                "VpcId": {
                    "Ref": "VpcId"
                }
            }
        },
        "EmrServiceAccessSecurityGroup": {
            "Condition": "CreateEmrCondition",
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Amazon EMR Service Access security group",
                "VpcId": {
                    "Ref": "VpcId"
                }
            }
        },
        "TCPFromServiceAccessSecurityGroupIngress": {
            "Condition": "CreateEmrCondition",
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "FromPort": 8443,
                "GroupId": {
                    "Fn::GetAtt": [
                        "EmrMasterPrivateSecurityGroup",
                        "GroupId"
                    ]
                },
                "IpProtocol": "tcp",
                "SourceSecurityGroupId": {
                    "Fn::GetAtt": [
                        "EmrServiceAccessSecurityGroup",
                        "GroupId"
                    ]
                },
                "ToPort": 8443
            }
        },
        "TCPFromSlaveSecurityGroupIngress": {
            "Condition": "CreateEmrCondition",
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "FromPort": 0,
                "GroupId": {
                    "Fn::GetAtt": [
                        "EmrMasterPrivateSecurityGroup",
                        "GroupId"
                    ]
                },
                "IpProtocol": "tcp",
                "SourceSecurityGroupId": {
                    "Fn::GetAtt": [
                        "EmrSlavePrivateSecurityGroup",
                        "GroupId"
                    ]
                },
                "ToPort": 65535
            }
        },
        "TCPFromMasterSecurityGroupIngress": {
            "Condition": "CreateEmrCondition",
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "FromPort": 0,
                "GroupId": {
                    "Fn::GetAtt": [
                        "EmrMasterPrivateSecurityGroup",
                        "GroupId"
                    ]
                },
                "IpProtocol": "tcp",
                "SourceSecurityGroupId": {
                    "Fn::GetAtt": [
                        "EmrMasterPrivateSecurityGroup",
                        "GroupId"
                    ]
                },
                "ToPort": "65535"
            }
        },
        "ICMPFromSlaveSecurityGroupIngress": {
            "Condition": "CreateEmrCondition",
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "FromPort": -1,
                "GroupId": {
                    "Fn::GetAtt": [
                        "EmrMasterPrivateSecurityGroup",
                        "GroupId"
                    ]
                },
                "IpProtocol": "icmp",
                "SourceSecurityGroupId": {
                    "Fn::GetAtt": [
                        "EmrSlavePrivateSecurityGroup",
                        "GroupId"
                    ]
                },
                "ToPort": -1
            }
        },
        "ICMPFromMasterSecurityGroupIngress": {
            "Condition": "CreateEmrCondition",
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "FromPort": -1,
                "GroupId": {
                    "Fn::GetAtt": [
                        "EmrMasterPrivateSecurityGroup",
                        "GroupId"
                    ]
                },
                "IpProtocol": "icmp",
                "SourceSecurityGroupId": {
                    "Fn::GetAtt": [
                        "EmrMasterPrivateSecurityGroup",
                        "GroupId"
                    ]
                },
                "ToPort": -1
            }
        },
        "UDPFromSlaveSecurityGroupIngress": {
            "Condition": "CreateEmrCondition",
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "FromPort": 0,
                "GroupId": {
                    "Fn::GetAtt": [
                        "EmrMasterPrivateSecurityGroup",
                        "GroupId"
                    ]
                },
                "IpProtocol": "udp",
                "SourceSecurityGroupId": {
                    "Fn::GetAtt": [
                        "EmrSlavePrivateSecurityGroup",
                        "GroupId"
                    ]
                },
                "ToPort": 65535
            }
        },
        "UDPFromMasterSecurityGroupIngress": {
            "Condition": "CreateEmrCondition",
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "FromPort": 0,
                "GroupId": {
                    "Fn::GetAtt": [
                        "EmrMasterPrivateSecurityGroup",
                        "GroupId"
                    ]
                },
                "IpProtocol": "udp",
                "SourceSecurityGroupId": {
                    "Fn::GetAtt": [
                        "EmrMasterPrivateSecurityGroup",
                        "GroupId"
                    ]
                },
                "ToPort": 65535
            }
        },
        "TCPFromServiceAccessIngress": {
            "Condition": "CreateEmrCondition",
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "FromPort": 8443,
                "GroupId": {
                    "Fn::GetAtt": [
                        "EmrSlavePrivateSecurityGroup",
                        "GroupId"
                    ]
                },
                "IpProtocol": "tcp",
                "SourceSecurityGroupId": {
                    "Fn::GetAtt": [
                        "EmrServiceAccessSecurityGroup",
                        "GroupId"
                    ]
                },
                "ToPort": 8443
            }
        },
        "TCPFromSlaveIngress": {
            "Condition": "CreateEmrCondition",
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "FromPort": 0,
                "GroupId": {
                    "Fn::GetAtt": [
                        "EmrSlavePrivateSecurityGroup",
                        "GroupId"
                    ]
                },
                "IpProtocol": "tcp",
                "SourceSecurityGroupId": {
                    "Fn::GetAtt": [
                        "EmrSlavePrivateSecurityGroup",
                        "GroupId"
                    ]
                },
                "ToPort": 65535
            }
        },
        "TCPFromMasterIngress": {
            "Condition": "CreateEmrCondition",
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "FromPort": 0,
                "GroupId": {
                    "Fn::GetAtt": [
                        "EmrSlavePrivateSecurityGroup",
                        "GroupId"
                    ]
                },
                "IpProtocol": "tcp",
                "SourceSecurityGroupId": {
                    "Fn::GetAtt": [
                        "EmrMasterPrivateSecurityGroup",
                        "GroupId"
                    ]
                },
                "ToPort": 65535
            }
        },
        "ICMPFromSlaveIngress": {
            "Condition": "CreateEmrCondition",
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "FromPort": -1,
                "GroupId": {
                    "Fn::GetAtt": [
                        "EmrSlavePrivateSecurityGroup",
                        "GroupId"
                    ]
                },
                "IpProtocol": "icmp",
                "SourceSecurityGroupId": {
                    "Fn::GetAtt": [
                        "EmrSlavePrivateSecurityGroup",
                        "GroupId"
                    ]
                },
                "ToPort": -1
            }
        },
        "ICMPFromMasterIngress": {
            "Condition": "CreateEmrCondition",
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "FromPort": -1,
                "GroupId": {
                    "Fn::GetAtt": [
                        "EmrSlavePrivateSecurityGroup",
                        "GroupId"
                    ]
                },
                "IpProtocol": "icmp",
                "SourceSecurityGroupId": {
                    "Fn::GetAtt": [
                        "EmrMasterPrivateSecurityGroup",
                        "GroupId"
                    ]
                },
                "ToPort": -1
            }
        },
        "UDPFromSlaveIngress": {
            "Condition": "CreateEmrCondition",
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "FromPort": 0,
                "GroupId": {
                    "Fn::GetAtt": [
                        "EmrSlavePrivateSecurityGroup",
                        "GroupId"
                    ]
                },
                "IpProtocol": "udp",
                "SourceSecurityGroupId": {
                    "Fn::GetAtt": [
                        "EmrSlavePrivateSecurityGroup",
                        "GroupId"
                    ]
                },
                "ToPort": 65535
            }
        },
        "UDPFromMasterIngress": {
            "Condition": "CreateEmrCondition",
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "FromPort": 0,
                "GroupId": {
                    "Fn::GetAtt": [
                        "EmrSlavePrivateSecurityGroup",
                        "GroupId"
                    ]
                },
                "IpProtocol": "udp",
                "SourceSecurityGroupId": {
                    "Fn::GetAtt": [
                        "EmrMasterPrivateSecurityGroup",
                        "GroupId"
                    ]
                },
                "ToPort": 65535
            }
        },
        "TCPMasterEgress": {
            "Condition": "CreateEmrCondition",
            "Type": "AWS::EC2::SecurityGroupEgress",
            "Properties": {
                "FromPort": 8443,
                "GroupId": {
                    "Fn::GetAtt": [
                        "EmrServiceAccessSecurityGroup",
                        "GroupId"
                    ]
                },
                "IpProtocol": "tcp",
                "DestinationSecurityGroupId": {
                    "Fn::GetAtt": [
                        "EmrMasterPrivateSecurityGroup",
                        "GroupId"
                    ]
                },
                "ToPort": 8443
            }
        },
        "TCPSlaveEgress": {
            "Condition": "CreateEmrCondition",
            "Type": "AWS::EC2::SecurityGroupEgress",
            "Properties": {
                "FromPort": 8443,
                "GroupId": {
                    "Fn::GetAtt": [
                        "EmrServiceAccessSecurityGroup",
                        "GroupId"
                    ]
                },
                "IpProtocol": "tcp",
                "DestinationSecurityGroupId": {
                    "Fn::GetAtt": [
                        "EmrSlavePrivateSecurityGroup",
                        "GroupId"
                    ]
                },
                "ToPort": 8443
            }
        },
        "RemoteAccessEmrSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Enable Amazon EMR remote access",
                "VpcId": {
                    "Ref": "VpcId"
                },
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": 0,
                        "ToPort": 65535,
                        "CidrIp": {
                            "Ref": "RemoteAccessCIDR"
                        }
                    }
                ]
            }
        },
        "JupiterEmrIamRole": {
            "Type": "AWS::IAM::Role",
            "Condition": "CreateEmrCondition",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": [
                                "sts:AssumeRole"
                            ],
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "elasticmapreduce.amazonaws.com"
                                ]
                            }
                        }
                    ]
                },
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/service-role/AmazonElasticMapReduceRole"
                ]
            }
        },
        "JupiterEmrEc2IamRole": {
            "Type": "AWS::IAM::Role",
            "Condition": "CreateEmrCondition",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": [
                                "sts:AssumeRole"
                            ],
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "elasticmapreduce.amazonaws.com"
                                ]
                            }
                        }
                    ]
                },
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/service-role/AmazonElasticMapReduceforEC2Role"
                ]
            }
        },
        "JupiterEmr": {
            "Type": "AWS::EMR::Cluster",
            "Condition": "CreateEmrCondition",
            "Properties": {
                "BootstrapActions": [
                    {
                        "Name": "JUPITER_pre-requisites",
                        "ScriptBootstrapAction": {
                            "Path": {
                                "Fn::Join": [
                                    "",
                                    [
                                        "s3://",
                                        {
                                            "Ref": "QSS3BucketName"
                                        },
                                        "/",
                                        {
                                            "Ref": "QSS3KeyPrefix"
                                        },
                                        "scripts/emrbootstrap.sh"
                                    ]
                                ]
                            }
                        }
                    }
                ],
                "Instances": {
                    "MasterInstanceGroup": {
                        "InstanceCount": 1,
                        "InstanceType": {
                            "Ref": "EmrMasterInstanceType"
                        },
                        "Market": "ON_DEMAND",
                        "Name": "Master"
                    },
                    "CoreInstanceGroup": {
                        "InstanceCount": {
                            "Ref": "EmrCoreNodes"
                        },
                        "InstanceType": {
                            "Ref": "EmrCoreInstanceType"
                        },
                        "Market": "ON_DEMAND",
                        "Name": "Core"
                    },
                    "TerminationProtected": false,
                    "Ec2SubnetId": {
                        "Fn::Select": [
                            "0",
                            {
                                "Fn::Split": [
                                    ",",
                                    {
                                        "Fn::Join": [
                                            ",",
                                            {
                                                "Ref": "PrivateSubnetIds"
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    },
                    "Ec2KeyName": {
                        "Ref": "KeyPairName"
                    },
                    "EmrManagedMasterSecurityGroup": {
                        "Ref": "EmrMasterPrivateSecurityGroup"
                    },
                    "EmrManagedSlaveSecurityGroup": {
                        "Ref": "EmrSlavePrivateSecurityGroup"
                    },
                    "ServiceAccessSecurityGroup": {
                        "Ref": "EmrServiceAccessSecurityGroup"
                    },
                    "AdditionalMasterSecurityGroups": [
                        {
                            "Ref": "RemoteAccessEmrSecurityGroup"
                        }
                    ]
                },
                "Applications": [
                    {
                        "Name": "Hadoop"
                    },
                    {
                        "Name": "Hive"
                    },
                    {
                        "Name": "Pig"
                    },
                    {
                        "Name": "Hue"
                    },
                    {
                        "Name": "Spark"
                    }
                ],
                "LogUri": {
                    "Fn::Join": [
                        "/",
                        [
                            "s3:/",
                            {
                                "Ref": "EmrLogBucket"
                            }
                        ]
                    ]
                },
                "ReleaseLabel": {
                    "Fn::FindInMap": [
                        "RegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "EmrVersion"
                    ]
                },
                "Name": "JupiterEmr",
                "JobFlowRole": "JupiterEmrEc2IamRole",
                "ServiceRole": "JupiterEmrIamRole",
                "VisibleToAllUsers": true
            }
        }
    },
    "Outputs": {
        "JupiterAppEndpoint": {
            "Value": {
                "Fn::If": [
                    "NoSSL",
                    {
                        "Fn::Join": [
                            "/",
                            [
                                "http:/",
                                {
                                    "Fn::GetAtt": [
                                        "JupiterEnvironment",
                                        "EndpointURL"
                                    ]
                                }
                            ]
                        ]
                    },
                    {
                        "Fn::Join": [
                            "/",
                            [
                                "https:/",
                                {
                                    "Fn::GetAtt": [
                                        "JupiterEnvironment",
                                        "EndpointURL"
                                    ]
                                }
                            ]
                        ]
                    }
                ]
            },
            "Description": "JUPITER Application URL",
            "Export": {
                "Name": {
                    "Fn::Sub": "${AWS::StackName}:JupiterAppEndpoint"
                }
            }
        },
        "JupiterDBEndpoint": {
            "Value": {
                "Fn::GetAtt": [
                    "JupiterDBInstance",
                    "Endpoint.Address"
                ]
            },
            "Description": "Database endpoint hostname",
            "Export": {
                "Name": {
                    "Fn::Sub": "${AWS::StackName}:JupiterDBEndpoint"
                }
            }
        },
        "JupiterEmr": {
            "Condition": "CreateEmrCondition",
            "Value": {
                "Fn::GetAtt": [
                    "JupiterEmr",
                    "MasterPublicDNS"
                ]
            },
            "Description": "Amazon EMR master node endpoint",
            "Export": {
                "Name": {
                    "Fn::Sub": "${AWS::StackName}:JupiterEmr"
                }
            }
        }
    }
}
