{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Generic S3 template that will delete the S3 bucket content and removes the bucket when the stack is deleted.(qs-1nmjm728g)",
    "Metadata": {
        "AWS::CloudFormation::Interface": {
            "ParameterGroups": [
                {
                    "Label": {
                        "default": "S3 Parameter"
                    },
                    "Parameters": [
                        "S3Bucket"
                    ]
                }
            ],
            "ParameterLabels": {
                "S3Bucket": {
                    "default": "S3 Bucket"
                }
            }
        }
    },
    "Outputs": {
        "Arn": {
            "Description": "Amazon Resource Name (ARN) of the specified bucket",
            "Value": {
                "Fn::GetAtt": [
                    "S3BucketResource",
                    "Arn"
                ]
            }
        },
        "Bucket": {
            "Description": "Bucket name",
            "Value": {
                "Ref": "S3BucketResource"
            }
        },
        "DomainName": {
            "Description": "IPv4 DNS name of the specified bucket.",
            "Value": {
                "Fn::GetAtt": [
                    "S3BucketResource",
                    "DomainName"
                ]
            }
        }
    },
    "Parameters": {
        "S3Bucket": {
            "AllowedPattern": "^[0-9a-zA-Z-]+(/[0-9a-zA-Z-]+)*$",
            "ConstraintDescription": "Must provide valid S3 Bucket name",
            "Description": "The name of S3 bucket to be created.",
            "Type": "String"
        }
    },
    "Resources": {
        "S3BucketResource": {
            "Properties": {
                "BucketName": {
                    "Ref": "S3Bucket"
                }
            },
            "Type": "AWS::S3::Bucket"
        },
        "S3DeleteLambda": {
            "DependsOn": [
                "S3LambdaRole"
            ],
            "Properties": {
                "Code": {
                    "ZipFile": {
                        "Fn::Join": [
                            "\n",
                            [
                                "#!/usr/bin/python",
                                "import time",
                                "import boto3",
                                "import logging",
                                "import cfnresponse",
                                "logger=logging.getLogger()",
                                "logger.setLevel(logging.INFO)",
                                "CFN_REQUEST_TYPE=\"RequestType\"",
                                "CFN_RESOURCE_PROPERTIES=\"ResourceProperties\"",
                                "SUCCEEDED=\"SUCCEEDED\"",
                                "FAILED=\"FAILED\"",
                                "CANCELLED=\"CANCELLED\"",
                                "class S3Resource(object):",
                                " def __init__(self):",
                                "  self._delegate={'Create':self.create,'Update':self.update,'Delete':self.delete}",
                                " def __call__(self,event,context):",
                                "  try:",
                                "   request=event[CFN_REQUEST_TYPE]",
                                "   self._delegate[request](event,context)",
                                "  except Exception as e:",
                                "   logger.exception(\"Unable to complete CFN request {}\".format(str(e)))",
                                "   cfnresponse.send(event,context,cfnresponse.FAILED,{})",
                                " def create(self,event,context):",
                                "  cfnresponse.send(event,context,cfnresponse.SUCCESS,{})",
                                " def update(self,event,context):",
                                "  cfnresponse.send(event,context,cfnresponse.SUCCESS,{})",
                                " def delete(self,event,context):",
                                "  props=event[CFN_RESOURCE_PROPERTIES]",
                                "  tmp_bucket=props[\"Bucket\"]",
                                "  s3=boto3.resource('s3')",
                                "  bucket=s3.Bucket(tmp_bucket)",
                                "  bucket.objects.all().delete()",
                                "  cfnresponse.send(event,context,cfnresponse.SUCCESS,{})",
                                "handler=S3Resource()",
                                "# Created by pyminifier (https://github.com/liftoff/pyminifier)",
                                ""
                            ]
                        ]
                    }
                },
                "Handler": "index.handler",
                "MemorySize": 128,
                "Role": {
                    "Fn::GetAtt": [
                        "S3LambdaRole",
                        "Arn"
                    ]
                },
                "Runtime": "python3.6",
                "Timeout": 300
            },
            "Type": "AWS::Lambda::Function"
        },
        "S3DeleteResource": {
            "DependsOn": [
                "S3DeleteLambda",
                "S3BucketResource"
            ],
            "Properties": {
                "Bucket": {
                    "Ref": "S3Bucket"
                },
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "S3DeleteLambda",
                        "Arn"
                    ]
                }
            },
            "Type": "Custom::S3Delete"
        },
        "S3LambdaRole": {
            "DependsOn": [
                "S3BucketResource"
            ],
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": [
                                "sts:AssumeRole"
                            ],
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "lambda.amazonaws.com"
                                ]
                            }
                        }
                    ],
                    "Version": "2012-10-17"
                },
                "Policies": [
                    {
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Action": [
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents",
                                        "logs:CreateLogGroup"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": [
                                        {
                                            "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
                                        }
                                    ]
                                }
                            ],
                            "Version": "2012-10-17"
                        },
                        "PolicyName": "lambda-log-access"
                    },
                    {
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Action": [
                                        "s3:DeleteObject",
                                        "s3:ListBucket"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": [
                                        {
                                            "Fn::Sub": "arn:aws:s3:::${S3Bucket}"
                                        },
                                        {
                                            "Fn::Sub": "arn:aws:s3:::${S3Bucket}/*"
                                        }
                                    ]
                                }
                            ],
                            "Version": "2012-10-17"
                        },
                        "PolicyName": "lambda-s3-access"
                    }
                ]
            },
            "Type": "AWS::IAM::Role"
        }
    }
}
