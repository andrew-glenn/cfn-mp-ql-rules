---
AWSTemplateFormatVersion: "2010-09-09"
Description: >-
  (WWPS-GLS-WF-SFN-EXAMPLE) Creates the complete set of resources needed to run
  genomics workflows using AWS Step-Functions on AWS Batch

Mappings:
  TagMap:
    default:
      architecture: "genomics-workflows"
      solution: "step-functions"
      tags:
        - Key: "architecture"
          Value: "genomics-workflows"
        - Key: "solution"
          Value: "step-functions"

Parameters:
  S3BucketName:
    Description: S3 bucket you are using for workflow inputs and outputs
    Type: String

  BatchJobQueue:
    Description: Name or ARN of the AWS Batch Job Queue the workflow will use by default
    Type: String


Resources:
  IAMCodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: codebuild.amazonaws.com
          Action: sts:AssumeRole

      Policies:
        - PolicyName: !Sub codebuild-ecr-access-${AWS::Region}
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              Effect: Allow
              Resource: "*"
              Action:
                - "ecr:CreateRepository"
                - "ecr:BatchCheckLayerAvailability"
                - "ecr:CompleteLayerUpload"
                - "ecr:GetAuthorizationToken"
                - "ecr:InitiateLayerUpload"
                - "ecr:PutImage"
                - "ecr:UploadLayerPart"
        - PolicyName: !Sub codebuild-logs-access-${AWS::Region}
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              Effect: Allow
              Resource: "*"
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents

  IAMLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaRole
      Policies:
        - PolicyName: !Sub codebuild-access-${AWS::Region}
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "codebuild:StartBuild"
                  - "codebuild:BatchGetBuilds"
                Resource: "*"

  IAMStepFunctionsExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: !Sub states-access-policy-${AWS::Region}
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "batch:SubmitJob"
                  - "batch:DescribeJobs"
                  - "batch:TerminateJob"
                Resource: "*"
              - Effect: Allow
                Action:
                  - "events:PutTargets"
                  - "events:PutRule"
                  - "events:DescribeRule"
                Resource:
                  - !Sub "arn:aws:events:${AWS::Region}:${AWS::AccountId}:rule/StepFunctionsGetEventsForBatchJobsRule"

  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub
        - sfn-genomics-workflow-tools-${GUID}
        - GUID: !Select [ 2, !Split [ "/", !Ref "AWS::StackId" ]]
      Description: >-
        Builds containers for example step-functions genomics workflow
      Artifacts:
        Type: NO_ARTIFACTS
      Environment:
        Type: LINUX_CONTAINER
        Image: aws/codebuild/standard:1.0
        ComputeType: BUILD_GENERAL1_LARGE
        PrivilegedMode: True

      ServiceRole: !GetAtt IAMCodeBuildRole.Arn
      Source:
        Type: NO_SOURCE
        BuildSpec: !Sub
          - |-
            version: 0.2
            phases:
              pre_build:
                commands:
                  - echo "Docker Login to ECR"
                  - $(aws ecr get-login --no-include-email --region ${AWS::Region})
                  - echo "Creating ECR image repositories"
                  - aws ecr create-repository --repository-name bwa || true
                  - aws ecr create-repository --repository-name samtools || true
                  - aws ecr create-repository --repository-name bcftools || true
                  - echo "Getting source code from Github"
                  - git clone https://github.com/aws-samples/aws-genomics-workflows.git
                  - cd aws-genomics-workflows
              build:
                commands:
                  - echo "Building containers"
                  - ROOT="$(pwd)/src/containers"
                  # run container builds in parallel to avoid hitting Lambda time limit
                  # output is captured in logs and `cat`d below to ease debugging
                  - (cd $ROOT/bwa && ./build.sh > ./build.log) & (cd $ROOT/samtools && ./build.sh > ./build.log) & (cd $ROOT/bcftools && ./build.sh > ./build.log) & wait
                  - cat $ROOT/bwa/build.log
                  - cat $ROOT/samtools/build.log
                  - cat $ROOT/bcftools/build.log
              post_build:
                commands:
                  - echo "Tagging container images"
                  - docker tag bwa:aws ${REGISTRY}/bwa:aws
                  - docker tag samtools:aws ${REGISTRY}/samtools:aws
                  - docker tag bcftools:aws ${REGISTRY}/bcftools:aws
                  - echo "Pushing container images to ECR"
                  # push containers in parallel to avoid hitting Lambda time limit
                  - docker push ${REGISTRY}/bwa:aws & docker push ${REGISTRY}/samtools:aws & docker push ${REGISTRY}/bcftools:aws & wait
          - REGISTRY: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com

      Tags: !FindInMap ["TagMap", "default", "tags"]

  CodeBuildInvocation:
    Type: Custom::CodeBuildInvocation
    Properties:
      ServiceToken: !GetAtt CodeBuildInvocationFunction.Arn
      BuildProject: !Ref CodeBuildProject

  CodeBuildInvocationFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt IAMLambdaExecutionRole.Arn
      Runtime: python3.7
      Timeout: 900
      Code:
        ZipFile: |
          from time import sleep

          import boto3
          import cfnresponse

          def handler(event, context):
              if event['RequestType'] in ("Create", "Update"):
                  codebuild = boto3.client('codebuild')
                  build = codebuild.start_build(
                      projectName=event["ResourceProperties"]["BuildProject"]
                  )['build']

                  id = build['id']
                  status = build['buildStatus']
                  while status == 'IN_PROGRESS':
                      sleep(10)
                      build = codebuild.batch_get_builds(ids=[id])['builds'][0]
                      status = build['buildStatus']

                  if status != "SUCCEEDED":
                      cfnresponse.send(event, context, cfnresponse.FAILED, None)

              cfnresponse.send(event, context, cfnresponse.SUCCESS, None)


  BatchJobDefBwa:
    Type: AWS::Batch::JobDefinition
    Properties:
      JobDefinitionName: bwa
      Type: container
      Parameters:
        command: mem
        reference_prefix: "s3://broad-references/hg38/v0"
        reference_name: "Homo_sapiens_assembly38"
        sample_id: "NIST7035"
        input_prefix: "s3://aws-batch-genomics-resources/fastq"
        output_prefix: !Sub "s3://${S3BucketName}/genomics-workflow"

      ContainerProperties:
        Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/bwa:aws
        Vcpus: 8
        Memory: 64000
        Command:
          - Ref::command
          - Ref::reference_prefix
          - Ref::reference_name
          - Ref::sample_id
          - Ref::input_prefix
          - Ref::output_prefix
        Volumes:
          - Host:
              SourcePath: /scratch
            Name: scratch
        MountPoints:
          - ContainerPath: /scratch
            SourceVolume: scratch

  BatchJobDefSamtools:
    Type: AWS::Batch::JobDefinition
    Properties:
      JobDefinitionName: samtools
      Type: container
      Parameters:
        command: sort
        reference_prefix: "s3://broad-references/hg38/v0"
        reference_name: "Homo_sapiens_assembly38"
        sample_id: "NIST7035"
        input_prefix: !Sub s3://${S3BucketName}/genomics-workflow"
        output_prefix: !Sub "s3://${S3BucketName}/genomics-workflow"

      ContainerProperties:
        Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/samtools:aws
        Vcpus: 8
        Memory: 32000
        Command:
          - Ref::command
          - Ref::reference_prefix
          - Ref::reference_name
          - Ref::sample_id
          - Ref::input_prefix
          - Ref::output_prefix
        Volumes:
          - Host:
              SourcePath: /scratch
            Name: scratch
        MountPoints:
          - ContainerPath: /scratch
            SourceVolume: scratch

  BatchJobDefBcftools:
    Type: AWS::Batch::JobDefinition
    Properties:
      JobDefinitionName: bcftools
      Type: container
      Parameters:
        command: mpileup
        reference_prefix: "s3://broad-references/hg38/v0"
        reference_name: "Homo_sapiens_assembly38"
        sample_id: "NIST7035"
        input_prefix: !Sub s3://${S3BucketName}/genomics-workflow"
        output_prefix: !Sub "s3://${S3BucketName}/genomics-workflow"

      ContainerProperties:
        Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/bcftools:aws
        Vcpus: 8
        Memory: 32000
        Command:
          - Ref::command
          - Ref::reference_prefix
          - Ref::reference_name
          - Ref::sample_id
          - Ref::input_prefix
          - Ref::output_prefix
        Volumes:
          - Host:
              SourcePath: /scratch
            Name: scratch
        MountPoints:
          - ContainerPath: /scratch
            SourceVolume: scratch

  SfnStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: !Sub
        - example-genomics-workflow-${GUID}
        - GUID: !Select [ 2, !Split [ "/", !Ref "AWS::StackId" ]]
      RoleArn: !GetAtt IAMStepFunctionsExecutionRole.Arn
      Tags: !FindInMap ["TagMap", "default", "tags"]
      DefinitionString: !Sub |-
        {
            "Comment": "Simple Genomics Workflow",
            "StartAt": "BwaMem",
            "States": {
                "BwaMem": {
                    "Type": "Task",
                    "InputPath": "$",
                    "ResultPath": "$.bwa.mem.result",
                    "Resource": "arn:aws:states:::batch:submitJob.sync",
                    "Parameters": {
                        "JobName": "bwa-mem",
                        "JobDefinition": "${BatchJobDefBwa}",
                        "JobQueue.$": "$.defaults.queue",
                        "Parameters.$": "$.bwa.mem.parameters",
                        "ContainerOverrides.$": "$.bwa.mem.resources"
                    },
                    "Next": "SamtoolsSort"
                },
                "SamtoolsSort": {
                    "Type": "Task",
                    "InputPath": "$",
                    "ResultPath": "$.samtools.sort.result",
                    "Resource": "arn:aws:states:::batch:submitJob.sync",
                    "Parameters": {
                        "JobName": "samtools-sort",
                        "JobDefinition": "${BatchJobDefSamtools}",
                        "JobQueue.$": "$.defaults.queue",
                        "Parameters.$": "$.samtools.sort.parameters",
                        "ContainerOverrides.$": "$.samtools.sort.resources"
                    },
                    "Next": "SamtoolsIndex"
                },
                "SamtoolsIndex": {
                    "Type": "Task",
                    "InputPath": "$",
                    "ResultPath": "$.samtools.index.result",
                    "Resource": "arn:aws:states:::batch:submitJob.sync",
                    "Parameters": {
                        "JobName": "samtools-index",
                        "JobDefinition": "${BatchJobDefSamtools}",
                        "JobQueue.$": "$.defaults.queue",
                        "Parameters.$": "$.samtools.index.parameters",
                        "ContainerOverrides.$": "$.samtools.index.resources"
                    },
                    "Next": "BcftoolsMPileup"
                },
                "BcftoolsMPileup": {
                    "Type": "Task",
                    "InputPath": "$",
                    "ResultPath": "$.bcftools.mpileup.result",
                    "Resource": "arn:aws:states:::batch:submitJob.sync",
                    "Parameters": {
                        "JobName": "bcftools-mpileup",
                        "JobDefinition": "${BatchJobDefBcftools}",
                        "JobQueue.$": "$.defaults.queue",
                        "Parameters.$": "$.bcftools.mpileup.parameters",
                        "ContainerOverrides.$": "$.bcftools.mpileup.resources"
                    },
                    "Next": "BcftoolsCall"
                },
                "BcftoolsCall": {
                    "Type": "Task",
                    "InputPath": "$",
                    "ResultPath": "$.bcftools.call.result",
                    "Resource": "arn:aws:states:::batch:submitJob.sync",
                    "Parameters": {
                        "JobName": "bcftools-call",
                        "JobDefinition": "${BatchJobDefBcftools}",
                        "JobQueue.$": "$.defaults.queue",
                        "Parameters.$": "$.bcftools.call.parameters",
                        "ContainerOverrides.$": "$.bcftools.call.resources"
                    },
                    "End": true
                }
            }
        }

Outputs:
  BwaContainerImage:
    Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/bwa:aws

  SamtoolsContainerImage:
    Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/samtools:aws

  BcftoolsContainerImage:
    Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/bcftools:aws

  BwaJobDefinition:
    Value: !Ref BatchJobDefBwa

  SamtoolsJobDefinition:
    Value: !Ref BatchJobDefSamtools

  BcftoolsJobDefinition:
    Value: !Ref BatchJobDefBcftools

  StateMachine:
    Value: !Ref SfnStateMachine
    Description: Step-functions state-machine that demonstrates a simple genomics workflow

  StateMachineInput:
    Description: Example input for the state machine
    Value:
      Fn::Sub:
        - |
          {
              "defaults": {
                  "queue": "${BatchJobQueue}"
              },
              "bwa": {
                  "mem": {
                      "parameters": {
                          "reference_prefix": "s3://broad-references/hg38/v0",
                          "reference_name": "Homo_sapiens_assembly38",
                          "sample_id": "${SampleID}",
                          "input_prefix": "s3://aws-batch-genomics-shared/secondary-analysis/example-files/fastq/",
                          "output_prefix": "s3://${S3BucketName}/genomics-workflow",
                          "command": "mem"
                      },
                      "resources": {
                          "Vcpus": 8,
                          "Memory": 64000
                      }
                  }
              },
              "samtools": {
                  "sort": {
                      "parameters": {
                          "reference_prefix": "s3://broad-references/hg38/v0",
                          "reference_name": "Homo_sapiens_assembly38",
                          "sample_id": "${SampleID}",
                          "input_prefix": "s3://${S3BucketName}/genomics-workflow",
                          "output_prefix": "s3://${S3BucketName}/genomics-workflow",
                          "command": "sort"
                      },
                      "resources": {
                          "Vcpus": 8,
                          "Memory": 32000
                      }
                  },
                  "index": {
                      "parameters": {
                          "reference_prefix": "s3://broad-references/hg38/v0",
                          "reference_name": "Homo_sapiens_assembly38",
                          "sample_id": "${SampleID}",
                          "input_prefix": "s3://${S3BucketName}/genomics-workflow",
                          "output_prefix": "s3://${S3BucketName}/genomics-workflow",
                          "command": "index"
                      },
                      "resources": {
                          "Vcpus": 8,
                          "Memory": 32000
                      }
                  }
              },
              "bcftools": {
                  "mpileup": {
                      "parameters": {
                          "reference_prefix": "s3://broad-references/hg38/v0",
                          "reference_name": "Homo_sapiens_assembly38",
                          "sample_id": "${SampleID}",
                          "input_prefix": "s3://${S3BucketName}/genomics-workflow",
                          "output_prefix": "s3://${S3BucketName}/genomics-workflow",
                          "command": "mpileup"
                      },
                      "resources": {
                          "Vcpus": 8,
                          "Memory": 32000
                      }
                  },
                  "call": {
                      "parameters": {
                          "reference_prefix": "s3://broad-references/hg38/v0",
                          "reference_name": "Homo_sapiens_assembly38",
                          "sample_id": "${SampleID}",
                          "input_prefix": "s3://${S3BucketName}/genomics-workflow",
                          "output_prefix": "s3://${S3BucketName}/genomics-workflow",
                          "command": "call"
                      },
                      "resources": {
                          "Vcpus": 8,
                          "Memory": 32000
                      }
                  }
              }
          }
        - SampleID: "NIST7035"
...
