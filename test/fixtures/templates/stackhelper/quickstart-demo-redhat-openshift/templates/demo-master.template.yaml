AWSTemplateFormatVersion: '2010-09-09'
Description: 'OpenShift Demo, License: Apache 2.0 (Please do not remove) Dec, 5, 2018 (qs-1p3nqspd9)'
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Red Hat subscription information
        Parameters:
          - RedhatSubscriptionUserName
          - RedhatSubscriptionPassword
          - RedhatSubscriptionPoolID
      - Label:
          default: Network configuration
        Parameters:
          - RemoteAccessCIDR
    ParameterLabels:
      RemoteAccessCIDR:
        default: Allowed external access CIDR
      RedhatSubscriptionUserName:
        default: Red Hat subscription user name
      RedhatSubscriptionPassword:
        default: Red Hat subscription password
      RedhatSubscriptionPoolID:
        default: Red Hat pool ID
Parameters:
  RemoteAccessCIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(3[0-2]|[1-2][0-9]|[0-9]))$|(^Auto$)
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/x
    Description: The CIDR IP range that is permitted to access the demo's AWS Cloud9 desktop, the OpenShift bastion host,
      and the web interface and applications hosted on the cluster. We recommend that you set this value to a trusted
      IP range. Alternatively, keep the default "Auto" setting to provide access to only the IP address launching the stack.
    Type: String
    Default: Auto
  RedhatSubscriptionUserName:
    Description: Your Red Hat user name.
    Type: String
  RedhatSubscriptionPassword:
    NoEcho: 'true'
    Description: Your Red Hat password.
    Type: String
    AllowedPattern: ^[^ \\']+$
  RedhatSubscriptionPoolID:
    Description: Your Red Hat pool ID.
    Type: String
Mappings:
  OpenShiftQuickStart:
    Config:
      MasterInstanceType: m5.xlarge
      NodesInstanceType: t3.xlarge
      EtcdInstanceType: t3.xlarge
      NumberOfMaster: 3
      NumberOfEtcd: 3
      NumberOfNodes: 1
      OpenshiftVersion: "3.11"
      AutomationBroker: Disabled
      HawkularMetrics: Disabled
      QSS3BucketName: aws-quickstart
      QSS3KeyPrefix: quickstart-demo-redhat-openshift/
Conditions:
  AutoCIDR: !Equals [ !Ref RemoteAccessCIDR, Auto ]
Resources:
  OpenShiftAdminSecret:
    Type: "AWS::SecretsManager::Secret"
    Properties:
      GenerateSecretString:
        RequireEachIncludedType: true
        GenerateStringKey: password
        PasswordLength: 12
        ExcludePunctuation: true
        SecretStringTemplate: '{"username": "admin"}'
  GetAzs:
    Type: Custom::GetAzs
    Properties:
      ServiceToken: !GetAtt 'GetAzsLambda.Arn'
  GetAzsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: /
      Policies:
        - PolicyName: lambda-getazs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeAvailabilityZones
                Resource:
                  - '*'
  GetAzsLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: gets 3 az names from the region the lambda is launched in
      Handler: index.handler
      Runtime: python3.6
      Role: !GetAtt 'GetAzsRole.Arn'
      Timeout: 300
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          import traceback
          import random


          def handler(event, context):
              status = cfnresponse.SUCCESS
              data = {}
              try:
                  if event['RequestType'] == 'Create':
                      filters = [{'Name': "state", "Values": ["available"]}]
                      resp = boto3.client('ec2').describe_availability_zones(Filters=filters)['AvailabilityZones']
                      data["Azs"] = random.sample([x["ZoneName"] for x in resp], 3)
              except Exception:
                  traceback.print_exc()
                  status = cfnresponse.FAILED
              cfnresponse.send(event, context, status, data, None)
  CreateKeypair:
    Type: Custom::CreateKeypair
    Properties:
      ServiceToken: !GetAtt 'CreateKeypairLambda.Arn'
  CreateKeypairRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: /
      Policies:
        - PolicyName: lambda-createkeypair1
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:CreateKeyPair
                  - ec2:DeleteKeyPair
                Resource:
                  - '*'
  CreateKeypairLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: creates a keypair and stores private key in ssm parameter store
      Handler: index.handler
      Runtime: python3.6
      Role: !GetAtt 'CreateKeypairRole.Arn'
      Timeout: 300
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          import traceback
          import random
          import string
          import time

          ec2_client = boto3.client('ec2')
          ssm_client = boto3.client('ssm')


          def handler(event, context):
              status = cfnresponse.SUCCESS
              data = {}
              if 'PhysicalResourceId' in event.keys():
                  key_name = event['PhysicalResourceId']
              try:
                  if event['RequestType'] == 'Create':
                      key_name = event['StackId'].split('/')[1][0:255-9] + '-' + ''.join(random.choice(
                         string.ascii_uppercase + string.ascii_lowercase + string.digits) for _ in range(8)
                      )
                      data['PrivateKey'] = ec2_client.create_key_pair(KeyName=key_name)['KeyMaterial']
                  elif event['RequestType'] == 'Delete':
                      ec2_client.delete_key_pair(KeyName=key_name)
              except Exception:
                  traceback.print_exc()
                  status = cfnresponse.FAILED
              if event['RequestType'] == 'Delete':
                  time.sleep(60) # give the logs some time to sync to cwl
              cfnresponse.send(event, context, status, data, key_name, noEcho=True)
  GetIp:
    Condition: AutoCIDR
    Type: Custom::GetIp
    Properties:
      ServiceToken: !GetAtt 'GetIpLambda.Arn'
  GetIpRole:
    Condition: AutoCIDR
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: /
      Policies:
        - PolicyName: lambda-GetIp
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: cloudformation:DescribeStacks
                Resource: !Ref 'AWS::StackId'
              - Effect: Allow
                Action: cloudtrail:LookupEvents
                Resource: "*"
  GetIpLambda:
    Condition: AutoCIDR
    Type: AWS::Lambda::Function
    Properties:
      Description: creates a keypair and stores private key in ssm parameter store
      Handler: index.handler
      Runtime: python3.6
      Role: !GetAtt 'GetIpRole.Arn'
      Timeout: 900
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          import traceback
          from datetime import timedelta
          import json
          from time import sleep

          cloudformation_client = boto3.client('cloudformation')
          cloudtrail_client = boto3.client('cloudtrail')


          def handler(event, context):
              print(json.dumps(event))
              status = cfnresponse.SUCCESS
              data = {}
              if 'PhysicalResourceId' in event.keys():
                  physical_id = event['PhysicalResourceId']
              try:
                  if event['RequestType'] == 'Create':
                      create_time = cloudformation_client.describe_stacks(StackName=event['StackId'])['Stacks'][0]['CreationTime']
                      retries = 0
                      max_retries = 50
                      while retries < max_retries:
                          retries += 1
                          try:
                              response = cloudtrail_client.lookup_events(
                                  LookupAttributes=[
                                         { 'AttributeKey': 'ResourceName', 'AttributeValue': event['StackId'] },
                                         { 'AttributeKey': 'EventName', 'AttributeValue': 'CreateStack' }
                                     ],
                                     StartTime=create_time - timedelta(minutes=15),
                                     EndTime=create_time + timedelta(minutes=15)
                                 )
                          except Exception:
                              traceback.print_exc()
                          if len(response['Events']) > 0:
                              break
                          else:
                              print('Event not in cloudtrail yet, %s retries left' % str(max_retries - retries))
                              sleep(15)
                      physical_id = json.loads(response['Events'][0]['CloudTrailEvent'])['sourceIPAddress'] + '/32'
              except Exception:
                  traceback.print_exc()
                  status = cfnresponse.FAILED
              cfnresponse.send(event, context, status, data, physical_id)
  SshPrivateKeySecret:
    Type: "AWS::SecretsManager::Secret"
    Properties:
      SecretString: !GetAtt CreateKeypair.PrivateKey
  VPCStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub
        - 'https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}submodules/quickstart-redhat-openshift/submodules/quickstart-aws-vpc/templates/aws-vpc.template'
        - QSS3BucketName: !FindInMap [OpenShiftQuickStart, Config, QSS3BucketName]
          QSS3KeyPrefix: !FindInMap [OpenShiftQuickStart, Config, QSS3KeyPrefix]
      Parameters:
        AvailabilityZones: !Join [",", !GetAtt GetAzs.Azs]
        KeyPairName: !Ref CreateKeypair
        NumberOfAZs: '3'
        PrivateSubnetATag2: !Sub "kubernetes.io/cluster/${AWS::StackName}-${AWS::Region}=owned"
        PrivateSubnetATag3: "kubernetes.io/role/internal-elb="
        PublicSubnetTag2: !Sub "kubernetes.io/cluster/${AWS::StackName}-${AWS::Region}=owned"
        PublicSubnetTag3: "kubernetes.io/role/elb="
  OpenShiftStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub
        - 'https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}submodules/quickstart-redhat-openshift/templates/openshift.template'
        - QSS3BucketName: !FindInMap [OpenShiftQuickStart, Config, QSS3BucketName]
          QSS3KeyPrefix: !FindInMap [OpenShiftQuickStart, Config, QSS3KeyPrefix]
      Parameters:
        MasterInstanceType: !FindInMap [OpenShiftQuickStart, Config, MasterInstanceType]
        NodesInstanceType: !FindInMap [OpenShiftQuickStart, Config, NodesInstanceType]
        EtcdInstanceType: !FindInMap [OpenShiftQuickStart, Config, EtcdInstanceType]
        NumberOfMaster: !FindInMap [OpenShiftQuickStart, Config, NumberOfMaster]
        NumberOfEtcd: !FindInMap [OpenShiftQuickStart, Config, NumberOfEtcd]
        NumberOfNodes: !FindInMap [OpenShiftQuickStart, Config, NumberOfNodes]
        KeyPairName: !Ref CreateKeypair
        PrivateSubnet1ID: !GetAtt 'VPCStack.Outputs.PrivateSubnet1AID'
        PrivateSubnet2ID: !GetAtt 'VPCStack.Outputs.PrivateSubnet2AID'
        PrivateSubnet3ID: !GetAtt 'VPCStack.Outputs.PrivateSubnet3AID'
        PublicSubnet1ID: !GetAtt 'VPCStack.Outputs.PublicSubnet1ID'
        PublicSubnet2ID: !GetAtt 'VPCStack.Outputs.PublicSubnet2ID'
        PublicSubnet3ID: !GetAtt 'VPCStack.Outputs.PublicSubnet3ID'
        RemoteAccessCIDR: !If [ AutoCIDR, !Ref GetIp, !Ref 'RemoteAccessCIDR' ]
        ContainerAccessCIDR: !If [ AutoCIDR, !Ref GetIp, !Ref 'RemoteAccessCIDR' ]
        QSS3BucketName: !FindInMap [OpenShiftQuickStart, Config, QSS3BucketName]
        QSS3KeyPrefix: !Sub
          - "${QSS3KeyPrefix}submodules/quickstart-redhat-openshift/"
          - QSS3KeyPrefix: !FindInMap [OpenShiftQuickStart, Config, QSS3KeyPrefix]
        OpenShiftAdminPassword: !Join ["", ['{{resolve:secretsmanager:', !Ref OpenShiftAdminSecret, ':SecretString:password}}']]
        RedhatSubscriptionUserName: !Ref 'RedhatSubscriptionUserName'
        RedhatSubscriptionPassword: !Ref 'RedhatSubscriptionPassword'
        RedhatSubscriptionPoolID: !Ref 'RedhatSubscriptionPoolID'
        VPCCIDR: !GetAtt 'VPCStack.Outputs.VPCCIDR'
        VPCID: !GetAtt 'VPCStack.Outputs.VPCID'
        ClusterName: !Sub '${AWS::StackName}-${AWS::Region}'
        OpenshiftContainerPlatformVersion: !FindInMap [OpenShiftQuickStart, Config, OpenshiftVersion]
        AutomationBroker: !FindInMap [OpenShiftQuickStart, Config, AutomationBroker]
  Cloud9Env:
    Type: AWS::Cloud9::EnvironmentEC2
    Properties:
      Name: !Sub '${AWS::StackName}-OpenShift-Demo'
      SubnetId: !GetAtt 'VPCStack.Outputs.PublicSubnet1ID'
      InstanceType: 't3.micro'
  Cloud9Role:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
  Cloud9InstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Roles: [!Ref Cloud9Role]
  C9Setup:
    Type: Custom::AttachRoleC9
    Properties:
      ServiceToken: !GetAtt 'C9SetupLambda.Arn'
      InstanceProfile: !Ref Cloud9InstanceProfile
      Cloud9Environment: !Ref Cloud9Env
      BootstrapPath: !Sub
      - 's3://${QSS3BucketName}/${QSS3KeyPrefix}scripts/cloud9-bootstrap.sh'
      - QSS3BucketName: !FindInMap [OpenShiftQuickStart, Config, QSS3BucketName]
        QSS3KeyPrefix: !FindInMap [OpenShiftQuickStart, Config, QSS3KeyPrefix]
      OcpPassword: !Ref OpenShiftAdminSecret
      OcpHostname: !GetAtt OpenShiftStack.Outputs.OpenShiftUI
  C9SetupRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: /
      Policies:
        - PolicyName: lambda-AttachRoleC9
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                - ec2:DescribeInstances
                - ec2:AssociateIamInstanceProfile
                - ec2:DescribeIamInstanceProfileAssociations
                - ssm:DescribeInstanceInformation
                - cloudformation:DescribeStackResources
                - ec2:AuthorizeSecurityGroupIngress
                - ssm:SendCommand
                - ssm:GetCommandInvocation
                - s3:GetObject
                Resource: "*"
              - Effect: Allow
                Action: iam:PassRole
                Resource: !GetAtt Cloud9Role.Arn
              - Effect: Allow
                Action: secretsmanager:GetSecretValue
                Resource: !Ref OpenShiftAdminSecret
              - Effect: Allow
                Action:
                - lambda:AddPermission
                - lambda:RemovePermission
                Resource:  "*"
              - Effect: Allow
                Action:
                - events:PutRule
                - events:DeleteRule
                - events:PutTargets
                - events:RemoveTargets
                Resource:  "*"
  C9SetupLambda:
    DependsOn: CopyZips
    Type: AWS::Lambda::Function
    Properties:
      Description: Associates a given instance profile with a given c9 environment
      Handler: lambda_function.handler
      Runtime: python3.6
      Role: !GetAtt 'C9SetupRole.Arn'
      Timeout: 900
      Code:
        S3Bucket: !Ref 'LambdaZipsBucket'
        S3Key: !Sub
          - '${QSS3KeyPrefix}functions/packages/c9setup/lambda.zip'
          - QSS3KeyPrefix: !FindInMap [OpenShiftQuickStart, Config, QSS3KeyPrefix]
  CopyZipsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: /
      Policies:
        - PolicyName: lambda-copier
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: s3:GetObject
                Resource: !Sub
                  - 'arn:aws:s3:::${QSS3BucketName}/${QSS3KeyPrefix}*'
                  - QSS3BucketName: !FindInMap [OpenShiftQuickStart, Config, QSS3BucketName]
                    QSS3KeyPrefix: !FindInMap [OpenShiftQuickStart, Config, QSS3KeyPrefix]
              - Effect: Allow
                Action: [ "s3:PutObject", "s3:DeleteObject" ]
                Resource: !Sub
                  - 'arn:aws:s3:::${LambdaZipsBucket}/${QSS3KeyPrefix}*'
                  - QSS3KeyPrefix: !FindInMap [OpenShiftQuickStart, Config, QSS3KeyPrefix]
  CopyZipsFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Copies objects from a source S3 bucket to a destination
      Handler: index.handler
      Runtime: python2.7
      Role: !GetAtt 'CopyZipsRole.Arn'
      Timeout: 240
      Code:
        ZipFile: |
          import json
          import logging
          import threading
          import boto3
          import cfnresponse


          def copy_objects(source_bucket, dest_bucket, prefix, objects):
              s3 = boto3.client('s3')
              for o in objects:
                  key = prefix + o
                  copy_source = {
                      'Bucket': source_bucket,
                      'Key': key
                  }
                  print('copy_source: %s' % copy_source)
                  print('dest_bucket = %s'%dest_bucket)
                  print('key = %s' %key)
                  s3.copy_object(CopySource=copy_source, Bucket=dest_bucket,
                        Key=key)


          def delete_objects(bucket, prefix, objects):
              s3 = boto3.client('s3')
              objects = {'Objects': [{'Key': prefix + o} for o in objects]}
              s3.delete_objects(Bucket=bucket, Delete=objects)


          def timeout(event, context):
              logging.error('Execution is about to time out, sending failure response to CloudFormation')
              cfnresponse.send(event, context, cfnresponse.FAILED, {}, None)


          def handler(event, context):
              # make sure we send a failure to CloudFormation if the function
              # is going to timeout
              timer = threading.Timer((context.get_remaining_time_in_millis()
                        / 1000.00) - 0.5, timeout, args=[event, context])
              timer.start()

              print('Received event: %s' % json.dumps(event))
              status = cfnresponse.SUCCESS
              try:
                  source_bucket = event['ResourceProperties']['SourceBucket']
                  dest_bucket = event['ResourceProperties']['DestBucket']
                  prefix = event['ResourceProperties']['Prefix']
                  objects = event['ResourceProperties']['Objects']
                  if event['RequestType'] == 'Delete':
                      delete_objects(dest_bucket, prefix, objects)
                  else:
                      copy_objects(source_bucket, dest_bucket, prefix, objects)
              except Exception as e:
                  logging.error('Exception: %s' % e, exc_info=True)
                  status = cfnresponse.FAILED
              finally:
                  timer.cancel()
                  cfnresponse.send(event, context, status, {}, None)
  LambdaZipsBucket:
    Type: AWS::S3::Bucket
    Properties:
      Tags: []
  CopyZips:
    Type: Custom::CopyZips
    Properties:
      ServiceToken: !GetAtt 'CopyZipsFunction.Arn'
      DestBucket: !Ref 'LambdaZipsBucket'
      SourceBucket: !FindInMap [OpenShiftQuickStart, Config, QSS3BucketName]
      Prefix: !FindInMap [OpenShiftQuickStart, Config, QSS3KeyPrefix]
      Objects:
        - functions/packages/c9setup/lambda.zip
Outputs:
  OpenShiftEndpoint:
    Description: OpenShift Endpoint
    Value: !GetAtt 'OpenShiftStack.Outputs.OpenShiftUI'
